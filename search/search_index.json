{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fast Craftsmanship","text":"<p>Welcome to the Fast Craftsmanship documentation!</p>"},{"location":"#what-is-fast-craftsmanship","title":"What is Fast Craftsmanship?","text":"<p>Fast Craftsmanship is a CLI tool designed to accelerate development tasks while adhering to best practices in software engineering. It provides a set of commands for creating project structures, managing GitHub repositories, and implementing domain-driven design patterns following functional programming principles.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>GitHub Integration: Manage GitHub repositories, workflows, and settings directly from CLI</li> <li>Project Setup: Create new projects with standardized structure and configurations</li> <li>Code Generation: Generate boilerplate code for domains, repositories, and services</li> <li>Functional Programming: Built with Railway Oriented Programming principles using the Expression library</li> <li>Domain-Driven Design: Support for DDD patterns and practices</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fast-craftsmanship\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Create a new project\nfcship project create my-awesome-project\n\n# Set up GitHub integration\nfcship github setup setup-workflows my-repo-name\n\n# Create a domain model\nfcship domain create User\n</code></pre>"},{"location":"#command-overview","title":"Command Overview","text":"<ul> <li><code>fcship github</code>: GitHub repository and workflow management</li> <li><code>fcship project</code>: Project creation and setup</li> <li><code>fcship domain</code>: Domain model generation</li> <li><code>fcship service</code>: Service layer generation</li> <li><code>fcship verify</code>: Code verification and analysis</li> </ul> <p>For detailed information about each command, please refer to the Commands section.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with Fast Craftsmanship, a CLI tool designed to accelerate development tasks while following best practices.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>pip or uv (recommended)</li> </ul>"},{"location":"getting-started/#install-with-pip","title":"Install with pip","text":"<pre><code>pip install fast-craftsmanship\n</code></pre>"},{"location":"getting-started/#install-with-uv-recommended","title":"Install with uv (recommended)","text":"<pre><code>uv pip install fast-craftsmanship\n</code></pre>"},{"location":"getting-started/#development-installation","title":"Development Installation","text":"<p>If you want to contribute or modify the tool:</p> <pre><code>git clone https://github.com/Fguedes90/fast-craftsmanship.git\ncd fast-craftsmanship\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<p>After installing, verify that the tool is working correctly:</p> <pre><code>fcship --version\n</code></pre> <p>This should display the version number of Fast Craftsmanship.</p>"},{"location":"getting-started/#basic-commands","title":"Basic Commands","text":""},{"location":"getting-started/#create-a-new-project","title":"Create a New Project","text":"<pre><code>fcship project create my-project\n</code></pre> <p>This creates a new project with a standardized structure.</p>"},{"location":"getting-started/#set-up-github-integration","title":"Set Up GitHub Integration","text":"<p>Fast Craftsmanship can set up your GitHub repository with CI/CD workflows:</p> <pre><code># Create a new GitHub repository\nfcship github create my-project\n\n# Set up CI/CD workflows\nfcship github setup setup-workflows my-project\n</code></pre>"},{"location":"getting-started/#generate-domain-models","title":"Generate Domain Models","text":"<p>Create domain models following DDD principles:</p> <pre><code>fcship domain create User name:str email:str\n</code></pre>"},{"location":"getting-started/#run-tests-and-verification","title":"Run Tests and Verification","text":"<pre><code>fcship verify\n</code></pre>"},{"location":"getting-started/#cli-command-structure","title":"CLI Command Structure","text":"<p>Fast Craftsmanship commands follow a consistent structure:</p> <pre><code>fcship &lt;command&gt; &lt;subcommand&gt; [options] [arguments]\n</code></pre> <p>For example:</p> <pre><code>fcship github create my-repository --private --description \"My private repository\"\n</code></pre>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<p>You can get help on any command by using the <code>--help</code> flag:</p> <pre><code># General help\nfcship --help\n\n# Help for a specific command\nfcship github --help\n\n# Help for a specific subcommand\nfcship github create --help\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you've installed Fast Craftsmanship and learned the basics, you can:</p> <ul> <li>Explore the Commands Reference for detailed information on all available commands</li> <li>Learn about Functional Programming principles used in Fast Craftsmanship</li> <li>Check out the Development Guide if you want to contribute to the project</li> </ul>"},{"location":"commands/","title":"Commands Reference","text":"<p>Fast Craftsmanship provides a set of commands to help you implement software projects quickly while following best practices.</p>"},{"location":"commands/#command-structure","title":"Command Structure","text":"<p>All commands follow a consistent structure:</p> <pre><code>fcship &lt;command&gt; &lt;subcommand&gt; [options] [arguments]\n</code></pre> <p>For example:</p> <pre><code>fcship github create my-repository\n</code></pre>"},{"location":"commands/#main-command-groups","title":"Main Command Groups","text":"<p>Fast Craftsmanship organizes functionality into these main command groups:</p> Command Description <code>github</code> GitHub repository and workflow management <code>project</code> Project creation and setup <code>domain</code> Domain model generation <code>service</code> Service layer generation <code>repo</code> Repository layer generation <code>api</code> API endpoint generation <code>verify</code> Code verification and analysis <code>test</code> Test utility commands <code>commit</code> Git commit assistance with conventional commits <code>compact</code> Compact code representation generation"},{"location":"commands/#getting-help","title":"Getting Help","text":"<p>You can get detailed help on any command by adding the <code>--help</code> flag:</p> <pre><code>fcship github --help\nfcship github create --help\n</code></pre>"},{"location":"commands/#common-options","title":"Common Options","text":"<p>These options are available across most commands:</p> Option Description <code>--help</code> Display help for a command <code>--version</code> Display version information <code>--verbose</code> Enable detailed output <code>--quiet</code> Suppress all output except errors <code>--no-color</code> Disable colorized output"},{"location":"commands/#command-details","title":"Command Details","text":"<p>Click on a specific command below to see detailed documentation:</p> <ul> <li>GitHub Commands - Repository and workflow management</li> <li>Verify Commands - Code verification and analysis  </li> <li>Project Commands - Project creation and setup</li> <li>Compact Commands - Compact code representation generation</li> </ul>"},{"location":"commands/compact/","title":"Compact Commands","text":"<p>Fast Craftsmanship provides commands for generating compact code representations of Python projects, useful for documentation and large language model context management.</p>"},{"location":"commands/compact/#overview","title":"Overview","text":"<p>The <code>compact</code> command allows you to:</p> <ul> <li>Generate concise, structured representation of Python code</li> <li>Analyze token usage for large language models (LLMs)</li> <li>Create compact summaries of large codebases</li> <li>Prepare code documentation with minimal context usage</li> </ul>"},{"location":"commands/compact/#basic-usage","title":"Basic Usage","text":""},{"location":"commands/compact/#generate-compact-code","title":"Generate Compact Code","text":"<pre><code>fcship compact\n</code></pre> <p>Generates a compact representation of all Python files in the current directory and saves it to <code>compact_code.txt</code> (default).</p>"},{"location":"commands/compact/#specify-output-file","title":"Specify Output File","text":"<pre><code>fcship compact --output OUTPUT_FILE\n</code></pre> <p>Generates a compact representation and saves it to the specified output file.</p> Option Description <code>-o, --output</code> Output file path (default: compact_code.txt)"},{"location":"commands/compact/#process-specific-files-or-directories","title":"Process Specific Files or Directories","text":"<pre><code>fcship compact --target PATH\n</code></pre> <p>Generates a compact representation of a specific file or directory.</p> Option Description <code>-t, --target</code> Target file or directory to process"},{"location":"commands/compact/#advanced-options","title":"Advanced Options","text":""},{"location":"commands/compact/#customize-ignored-files-and-directories","title":"Customize Ignored Files and Directories","text":"<pre><code>fcship compact --ignore-dirs \"venv,node_modules\" --ignore-files \"setup.py,test_*.py\"\n</code></pre> <p>Customizes which directories and files to exclude from processing.</p> Option Description <code>--ignore-dirs</code> Comma-separated list of directories to ignore <code>--ignore-files</code> Comma-separated list of file patterns to ignore"},{"location":"commands/compact/#output-to-console","title":"Output to Console","text":"<pre><code>fcship compact --stdout\n</code></pre> <p>Prints the compact representation to the console instead of a file.</p> Option Description <code>--stdout</code> Print output to stdout instead of a file"},{"location":"commands/compact/#count-tokens","title":"Count Tokens","text":"<pre><code>fcship compact --count-tokens [--token-model MODEL]\n</code></pre> <p>Counts tokens in the generated representation for LLM usage estimation.</p> Option Description <code>--count-tokens</code> Count tokens in the output file <code>--token-model</code> Model to use for token counting (default: gpt-4o)"},{"location":"commands/compact/#command-reference","title":"Command Reference","text":""},{"location":"commands/compact/#command-structure","title":"Command Structure","text":"<pre><code>fcship compact [options]\n</code></pre>"},{"location":"commands/compact/#available-options","title":"Available Options","text":"Option Description <code>-o, --output FILE</code> Output file path (default: compact_code.txt) <code>-d, --directory DIR</code> Project root directory (default: current directory) <code>-g, --guide FILE</code> Path to compact notation guide file <code>-t, --target PATH</code> Target file or directory to process <code>--stdout</code> Print output to stdout instead of file <code>-v, --verbose</code> Enable verbose output <code>--ignore-dirs LIST</code> Comma-separated list of directories to ignore <code>--ignore-files LIST</code> Comma-separated list of file patterns to ignore <code>--count-tokens</code> Count tokens in the output file <code>--token-model MODEL</code> Model to use for token counting (gpt-4o, gpt-3.5-turbo, claude-3-opus)"},{"location":"commands/compact/#compact-notation-format","title":"Compact Notation Format","text":"<p>The generated compact code uses a specialized notation:</p> <ul> <li>Classes: <code>C:NomeClasse&lt;Base1,Base2&gt;</code></li> <li>Dataclasses: <code>D:NomeDataclass;campo1:tipo;campo2:tipo</code></li> <li>Functions: <code>F:nome_funcao(arg1:tipo,arg2)-&gt;tipo_retorno</code></li> <li>Methods: <code>m:metodo(self,arg)-&gt;tipo</code></li> <li>Methods Dunder: <code>d:__init__(self,arg)</code></li> <li>Constantes/Enums: <code>E:CONSTANTE</code></li> </ul>"},{"location":"commands/compact/#examples","title":"Examples","text":""},{"location":"commands/compact/#basic-compact-code-generation","title":"Basic Compact Code Generation","text":"<pre><code># Generate compact code for current project\nfcship compact\n\n# Generate compact code for a specific directory\nfcship compact -t ./src\n\n# Generate compact code for a specific file\nfcship compact -t ./src/main.py\n</code></pre>"},{"location":"commands/compact/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Generate compact code and count tokens for GPT-4o\nfcship compact --count-tokens --token-model gpt-4o\n\n# Generate compact code, excluding tests and venv directories\nfcship compact --ignore-dirs \"venv,tests\" --output compact_no_tests.txt\n\n# Print compact code to console for quick review\nfcship compact --stdout -t ./src/core\n</code></pre>"},{"location":"commands/compact/#token-analysis","title":"Token Analysis","text":"<pre><code># Generate compact code and analyze token usage\nfcship compact --count-tokens\n</code></pre> <p>The token analysis will display: - Total token count - Cost estimates for different LLM models - Context utilization percentages - Token density metrics </p>"},{"location":"commands/github/","title":"GitHub Commands","text":"<p>Fast Craftsmanship provides a comprehensive set of commands for managing GitHub repositories and workflows.</p>"},{"location":"commands/github/#overview","title":"Overview","text":"<p>The <code>github</code> command group allows you to:</p> <ul> <li>Create and manage GitHub repositories</li> <li>Set up CI/CD workflows</li> <li>Configure GitHub environments and secrets</li> <li>Manage issues and pull requests</li> <li>Monitor workflow runs</li> </ul>"},{"location":"commands/github/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account</li> <li>GitHub CLI (<code>gh</code>) installed and authenticated</li> <li>Appropriate permissions for the repositories you want to manage</li> </ul>"},{"location":"commands/github/#basic-commands","title":"Basic Commands","text":""},{"location":"commands/github/#list-repositories","title":"List Repositories","text":"<pre><code>fcship github list\n</code></pre> <p>Lists all repositories the authenticated user has access to.</p>"},{"location":"commands/github/#create-repository","title":"Create Repository","text":"<pre><code>fcship github create REPO_NAME [--private] [--description \"Description\"]\n</code></pre> <p>Creates a new GitHub repository.</p> Option Description <code>--private</code> Creates a private repository (default: public) <code>--description</code> Optional description for the repository <code>--team</code> Team that should be granted access to the repository"},{"location":"commands/github/#delete-repository","title":"Delete Repository","text":"<pre><code>fcship github delete REPO_NAME [--confirm]\n</code></pre> <p>Deletes a GitHub repository.</p> Option Description <code>--confirm</code> Skip confirmation prompt"},{"location":"commands/github/#workflow-commands","title":"Workflow Commands","text":""},{"location":"commands/github/#setup-workflows","title":"Setup Workflows","text":"<pre><code>fcship github setup setup-workflows REPO_NAME\n</code></pre> <p>Sets up common CI/CD workflows for the repository, including:</p> <ul> <li>Continuous Integration workflow (testing, linting)</li> <li>Release workflow (build and publish)</li> <li>Version bumping workflow</li> </ul>"},{"location":"commands/github/#list-workflow-runs","title":"List Workflow Runs","text":"<pre><code>fcship github runs list REPO_NAME [--limit NUM] [--workflow NAME]\n</code></pre> <p>Lists recent workflow runs for a repository.</p> Option Description <code>--limit</code> Maximum number of runs to display (default: 10) <code>--workflow</code> Filter by workflow name or ID"},{"location":"commands/github/#view-workflow-run","title":"View Workflow Run","text":"<pre><code>fcship github runs view REPO_NAME RUN_ID\n</code></pre> <p>Shows detailed information about a specific workflow run.</p>"},{"location":"commands/github/#watch-workflow-run","title":"Watch Workflow Run","text":"<pre><code>fcship github runs watch REPO_NAME RUN_ID\n</code></pre> <p>Monitors a workflow run in real-time, showing status updates.</p>"},{"location":"commands/github/#environment-commands","title":"Environment Commands","text":""},{"location":"commands/github/#setup-environments","title":"Setup Environments","text":"<pre><code>fcship github setup setup-environments REPO_NAME\n</code></pre> <p>Creates staging and production environments for the repository.</p>"},{"location":"commands/github/#add-secrets","title":"Add Secrets","text":"<pre><code>fcship github setup setup-secrets REPO_NAME SECRET_NAME SECRET_VALUE\n</code></pre> <p>Adds repository-level secrets for use in GitHub Actions workflows.</p>"},{"location":"commands/github/#examples","title":"Examples","text":""},{"location":"commands/github/#setting-up-a-new-project-with-cicd","title":"Setting up a new project with CI/CD","text":"<pre><code># Create repository\nfcship github create my-awesome-project --description \"My awesome Python project\"\n\n# Set up workflows\nfcship github setup setup-workflows my-awesome-project\n\n# Set up environments\nfcship github setup setup-environments my-awesome-project\n\n# Add PyPI token for publishing\nfcship github setup setup-secrets my-awesome-project PYPI_API_TOKEN your-token-value\n</code></pre>"},{"location":"commands/github/#monitoring-a-workflow-run","title":"Monitoring a workflow run","text":"<pre><code># List recent workflow runs\nfcship github runs list my-awesome-project\n\n# Watch a specific run in real-time\nfcship github runs watch my-awesome-project 1234567890\n</code></pre>"},{"location":"commands/project/","title":"Project Commands","text":"<p>The <code>project</code> command group helps you create and manage project structures according to best practices.</p>"},{"location":"commands/project/#overview","title":"Overview","text":"<p>The <code>project</code> commands provide tools for:</p> <ul> <li>Creating new projects with standard structure</li> <li>Setting up project configuration </li> <li>Adding components to existing projects</li> <li>Migrating existing code to follow best practices</li> </ul>"},{"location":"commands/project/#commands","title":"Commands","text":""},{"location":"commands/project/#create-project","title":"Create Project","text":"<pre><code>fcship project create NAME [--template TEMPLATE] [--output-dir DIR]\n</code></pre> <p>Creates a new project with a standardized structure.</p> Option Description <code>--template</code> Project template to use (default, minimal, api, cli, library) <code>--output-dir</code> Directory where the project should be created <code>--description</code> Short description for the project <code>--author</code> Author name for the project <code>--package-name</code> Python package name (defaults to project name) <code>--no-git</code> Do not initialize a git repository <p>The created project will include:</p> <ul> <li>Standard directory structure</li> <li>Configuration files (pyproject.toml, etc.)</li> <li>Documentation structure</li> <li>Initial code structure</li> <li>Git repository (unless <code>--no-git</code> is specified)</li> </ul>"},{"location":"commands/project/#add-component","title":"Add Component","text":"<pre><code>fcship project add NAME COMPONENT [--output-dir DIR]\n</code></pre> <p>Adds a component to an existing project.</p> <p>Components can include:</p> <ul> <li><code>cli</code>: Command line interface</li> <li><code>api</code>: REST API</li> <li><code>db</code>: Database integration</li> <li><code>docs</code>: Documentation structure</li> <li><code>tests</code>: Test framework</li> <li><code>ci</code>: CI/CD configuration</li> </ul>"},{"location":"commands/project/#init-project","title":"Init Project","text":"<pre><code>fcship project init [--template TEMPLATE]\n</code></pre> <p>Initializes a project in the current directory. Useful for adding project structure to existing code.</p>"},{"location":"commands/project/#project-templates","title":"Project Templates","text":"<p>Fast Craftsmanship includes several project templates:</p> Template Description <code>default</code> Standard Python project with package structure <code>minimal</code> Minimal Python package with basic configuration <code>api</code> FastAPI-based REST API project <code>cli</code> Command-line application using Typer <code>library</code> Reusable Python library package <code>domain</code> Domain-driven design project structure"},{"location":"commands/project/#examples","title":"Examples","text":""},{"location":"commands/project/#creating-a-new-project","title":"Creating a New Project","text":"<pre><code># Create a standard project\nfcship project create my-awesome-project --description \"My awesome project\"\n\n# Create a CLI project\nfcship project create my-tool --template cli --description \"Command-line utility\"\n</code></pre>"},{"location":"commands/project/#adding-components-to-a-project","title":"Adding Components to a Project","text":"<pre><code># Add REST API to an existing project\nfcship project add my-project api\n\n# Add database integration\nfcship project add my-project db --db-type postgres\n</code></pre>"},{"location":"commands/project/#initializing-an-existing-project","title":"Initializing an Existing Project","text":"<pre><code># Navigate to an existing project\ncd existing-code\n\n# Initialize project structure\nfcship project init --template domain\n</code></pre>"},{"location":"commands/project/#project-structure","title":"Project Structure","text":"<p>The default project structure follows these conventions:</p> <pre><code>my-project/\n\u251c\u2500\u2500 .github/workflows/      # CI/CD configuration\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 my_project/             # Source code package\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 cli.py             # Command line interface\n\u2502   \u251c\u2500\u2500 core/              # Core functionality\n\u2502   \u2514\u2500\u2500 utils/             # Utility functions\n\u251c\u2500\u2500 tests/                  # Test files\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_core.py\n\u251c\u2500\u2500 .gitignore              # Git ignore file\n\u251c\u2500\u2500 LICENSE                 # License file\n\u251c\u2500\u2500 README.md               # README file\n\u251c\u2500\u2500 CHANGELOG.md            # Changelog\n\u2514\u2500\u2500 pyproject.toml          # Project configuration\n</code></pre>"},{"location":"commands/project/#customizing-project-templates","title":"Customizing Project Templates","text":"<p>You can create custom project templates by placing template files in:</p> <pre><code>~/.config/fcship/templates/project/\n</code></pre> <p>Each template should be a directory containing template files for a project type.</p>"},{"location":"commands/verify/","title":"Verify Commands","text":"<p>The <code>verify</code> command group provides tools for validating your project code, checking for issues, and ensuring adherence to best practices.</p>"},{"location":"commands/verify/#overview","title":"Overview","text":"<p>The <code>verify</code> command helps you:</p> <ul> <li>Run code quality checks</li> <li>Validate project structure</li> <li>Ensure dependencies are correctly installed</li> <li>Check for common issues and anti-patterns</li> </ul>"},{"location":"commands/verify/#commands","title":"Commands","text":""},{"location":"commands/verify/#verify-project","title":"Verify Project","text":"<pre><code>fcship verify\n</code></pre> <p>Runs a complete verification of the current project, checking:</p> <ul> <li>Project structure</li> <li>Required files</li> <li>Code quality</li> <li>Dependency integrity</li> </ul> <p>The command will output a detailed report of any issues found, with suggestions for remediation.</p>"},{"location":"commands/verify/#verify-structure","title":"Verify Structure","text":"<pre><code>fcship verify structure\n</code></pre> <p>Checks only the project structure, including:</p> <ul> <li>Directory organization</li> <li>Required configuration files</li> <li>Package naming conventions</li> </ul>"},{"location":"commands/verify/#verify-dependencies","title":"Verify Dependencies","text":"<pre><code>fcship verify dependencies\n</code></pre> <p>Validates that all required dependencies are correctly installed and compatible.</p>"},{"location":"commands/verify/#options","title":"Options","text":"Option Description <code>--fix</code> Automatically fix common issues where possible <code>--output=FORMAT</code> Output format (text, json, html) <code>--verbose</code> Show detailed information during verification <code>--report-file=FILE</code> Save verification report to a file"},{"location":"commands/verify/#examples","title":"Examples","text":""},{"location":"commands/verify/#basic-verification","title":"Basic Verification","text":"<pre><code>fcship verify\n</code></pre> <p>This performs a standard verification of the current project.</p>"},{"location":"commands/verify/#fixing-issues-automatically","title":"Fixing Issues Automatically","text":"<pre><code>fcship verify --fix\n</code></pre> <p>This attempts to automatically fix common issues found during verification.</p>"},{"location":"commands/verify/#getting-detailed-output","title":"Getting Detailed Output","text":"<pre><code>fcship verify --verbose\n</code></pre> <p>Shows detailed information about each check performed during verification.</p>"},{"location":"commands/verify/#generating-a-report","title":"Generating a Report","text":"<pre><code>fcship verify --output=html --report-file=verification-report.html\n</code></pre> <p>Generates an HTML report of the verification results.</p>"},{"location":"commands/verify/#customizing-verification","title":"Customizing Verification","text":"<p>You can create a <code>.fcshiprc.yaml</code> file in your project root to customize verification:</p> <pre><code>verify:\n  exclude:\n    - \"build/\"\n    - \"dist/\"\n    - \"*.pyc\"\n  rules:\n    code_quality: true\n    structure: true\n    dependencies: true\n  custom_checks:\n    - path: \"scripts/custom_verify.py\"\n      function: \"run_my_check\"\n</code></pre>"},{"location":"commands/verify/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>The verify command can be integrated into CI/CD pipelines to ensure code quality:</p> <pre><code># In your GitHub workflow\n- name: Verify project\n  run: |\n    pip install fast-craftsmanship\n    fcship verify --output=json --report-file=verification.json\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/","title":"MVP Backend Architecture","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#key-architectural-decisions","title":"Key Architectural Decisions","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#1-project-organization","title":"1. Project Organization","text":"<pre><code>backend/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 api/                    # API layer\n\u2502   \u2502   \u251c\u2500\u2500 v1/                # API version\n\u2502   \u2502   \u2514\u2500\u2500 deps.py            # Dependency injection\n\u2502   \u251c\u2500\u2500 core/                  # Core functionality\n\u2502   \u2502   \u251c\u2500\u2500 config.py          # Configuration\n\u2502   \u2502   \u251c\u2500\u2500 security.py        # Security utilities\n\u2502   \u2502   \u2514\u2500\u2500 errors.py          # Error definitions\n\u2502   \u251c\u2500\u2500 models/                # Database models\n\u2502   \u2502   \u251c\u2500\u2500 base.py           \n\u2502   \u2502   \u2514\u2500\u2500 mixins.py\n\u2502   \u251c\u2500\u2500 schemas/               # Pydantic schemas\n\u2502   \u251c\u2500\u2500 services/              # Business logic\n\u2502   \u251c\u2500\u2500 repositories/          # Data access\n\u2502   \u2514\u2500\u2500 utils/                 # Shared utilities\n\u251c\u2500\u2500 tests/                     # Test suite\n\u2514\u2500\u2500 alembic/                   # Database migrations\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#2-layer-separation","title":"2. Layer Separation","text":"<pre><code>graph TD\n    A[API Routes] --&gt; B[Services]\n    B --&gt; C[Repositories]\n    C --&gt; D[Database]\n    E[Schemas] --&gt; A\n    F[Models] --&gt; C\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#api-layer","title":"API Layer","text":"<ul> <li>Route definitions only</li> <li>Request/response handling</li> <li>Input validation</li> <li>Dependency injection</li> <li>No business logic</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#service-layer","title":"Service Layer","text":"<ul> <li>Business logic implementation</li> <li>Transaction management</li> <li>Cross-cutting concerns</li> <li>No direct database access</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#repository-layer","title":"Repository Layer","text":"<ul> <li>Database operations</li> <li>Query construction</li> <li>Data mapping</li> <li>Reusable data access</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#3-design-patterns","title":"3. Design Patterns","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#dependency-injection","title":"Dependency Injection","text":"<pre><code># Example dependency structure\ndef get_repository():\n    return Repository()\n\ndef get_service(repo: Repository = Depends(get_repository)):\n    return Service(repo)\n\n@router.get(\"/\")\ndef endpoint(service: Service = Depends(get_service)):\n    return service.operation()\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#repository-pattern","title":"Repository Pattern","text":"<pre><code># Example repository interface\nclass Repository(Protocol):\n    def get(self, id: int) -&gt; Model:\n        ...\n    def create(self, data: dict) -&gt; Model:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#service-layer-pattern","title":"Service Layer Pattern","text":"<pre><code># Example service structure\nclass Service:\n    def __init__(self, repository: Repository):\n        self.repository = repository\n\n    def operation(self, data: dict) -&gt; Any:\n        # Business logic here\n        pass\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#4-testing-strategy","title":"4. Testing Strategy","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py               # Shared fixtures\n\u251c\u2500\u2500 unit/                    # Unit tests\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 repositories/\n\u251c\u2500\u2500 integration/             # Integration tests\n\u2502   \u2514\u2500\u2500 api/\n\u2514\u2500\u2500 fixtures/               # Test data\n</code></pre>"},{"location":"dev-log/backend-planing/01_project_archtecture/#testing-principles","title":"Testing Principles","text":"<ul> <li>Unit tests for business logic</li> <li>Integration tests for APIs</li> <li>Fixtures over mocks when possible</li> <li>One assert per test</li> <li>Descriptive test names</li> <li>Isolated test database</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#core-infrastructure-components","title":"Core Infrastructure Components","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#database-access","title":"Database Access","text":"<ul> <li>SQLModel for models</li> <li>Repository pattern for queries</li> <li>Explicit transaction management</li> <li>Migration tracking with Alembic</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#error-handling","title":"Error Handling","text":"<ul> <li>Custom exception classes</li> <li>Global exception handler</li> <li>Structured error responses</li> <li>Detailed logging</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#authentication","title":"Authentication","text":"<ul> <li>JWT token-based</li> <li>Role-based access control</li> <li>Simple permission model</li> <li>Session management</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#configuration","title":"Configuration","text":"<ul> <li>Environment-based config</li> <li>Pydantic settings model</li> <li>Type-safe configuration</li> <li>Secrets management</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#development-guidelines","title":"Development Guidelines","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#code-organization","title":"Code Organization","text":"<ul> <li>Single responsibility principle</li> <li>Dependency injection</li> <li>Interface segregation</li> <li>Explicit dependencies</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#coding-standards","title":"Coding Standards","text":"<ul> <li>Type hints everywhere</li> <li>Docstring for public APIs</li> <li>Consistent naming conventions</li> <li>Black for formatting</li> <li>Ruff for linting</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#documentation","title":"Documentation","text":"<ul> <li>OpenAPI/Swagger docs</li> <li>README.md in each module</li> <li>API endpoint documentation</li> <li>Type hint documentation</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"dev-log/backend-planing/01_project_archtecture/#unit-testing","title":"Unit Testing","text":"<ul> <li>Test business logic in isolation</li> <li>Mock external dependencies</li> <li>Focus on edge cases</li> <li>Fast execution</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#integration-testing","title":"Integration Testing","text":"<ul> <li>Test API endpoints</li> <li>Use test database</li> <li>Test happy paths</li> <li>Verify error responses</li> </ul>"},{"location":"dev-log/backend-planing/01_project_archtecture/#test-coverage","title":"Test Coverage","text":"<ul> <li>Minimum 80% coverage</li> <li>Critical paths 100%</li> <li>Integration test core flows</li> <li>Report coverage metrics</li> </ul>"},{"location":"dev-log/backend-planing/architecture_analysis/","title":"Architecture Analysis","text":""},{"location":"dev-log/backend-planing/architecture_analysis/#current-vs-planned-structure","title":"Current vs Planned Structure","text":""},{"location":"dev-log/backend-planing/architecture_analysis/#domain-organization","title":"Domain Organization","text":""},{"location":"dev-log/backend-planing/architecture_analysis/#planned-structure-from-backend-planmd","title":"Planned Structure (from backend-plan.md)","text":"<pre><code>app/\n\u251c\u2500\u2500 domains/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 permissions/\n\u2502   \u251c\u2500\u2500 files/\n\u2502   \u2514\u2500\u2500 tenant/\n\u251c\u2500\u2500 core/\n\u251c\u2500\u2500 infrastructure/\n\u2514\u2500\u2500 shared/\n</code></pre>"},{"location":"dev-log/backend-planing/architecture_analysis/#current-structure","title":"Current Structure","text":"<pre><code>backend/app/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 deps.py\n\u251c\u2500\u2500 core/\n\u251c\u2500\u2500 models/\n\u251c\u2500\u2500 schemas/\n\u251c\u2500\u2500 services/\n\u251c\u2500\u2500 repositories/\n\u2514\u2500\u2500 utils/\n</code></pre>"},{"location":"dev-log/backend-planing/architecture_analysis/#key-differences","title":"Key Differences","text":"<ol> <li>Domain Organization</li> <li>Planned: Domain-driven with self-contained modules</li> <li>Current: Traditional layered architecture</li> <li> <p>Gap: Need to restructure to domain-focused organization</p> </li> <li> <p>Layer Separation</p> </li> <li>Planned: Clear separation between API, Service, Domain, and Infrastructure layers</li> <li>Current: Has some layer separation but not fully aligned with DDD principles</li> <li> <p>Gap: Need to better define boundaries between layers</p> </li> <li> <p>Multi-Tenant Architecture</p> </li> <li>Planned: Comprehensive multi-tenant support with schema design</li> <li>Current: No visible multi-tenant implementation</li> <li> <p>Gap: Need to implement tenant isolation and management</p> </li> <li> <p>Permission System</p> </li> <li>Planned: Sophisticated RBAC with tenant-specific configurations</li> <li>Current: Basic role-based authentication</li> <li>Gap: Need to enhance permission system</li> </ol>"},{"location":"dev-log/backend-planing/architecture_analysis/#recommended-actions","title":"Recommended Actions","text":"<ol> <li> <p>Structural Reorganization <pre><code>backend/app/\n\u251c\u2500\u2500 domains/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 repositories/\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u2514\u2500\u2500 [other domains]\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 errors/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u251c\u2500\u2500 cache/\n\u2502   \u2514\u2500\u2500 storage/\n\u2514\u2500\u2500 shared/\n    \u251c\u2500\u2500 utils/\n    \u2514\u2500\u2500 middlewares/\n</code></pre></p> </li> <li> <p>Layer Integration</p> </li> <li>Each domain should encapsulate its own layers</li> <li>Clear interfaces between domains</li> <li> <p>Shared infrastructure services</p> </li> <li> <p>Testing Alignment</p> </li> <li>Reorganize tests to match domain structure</li> <li>Add specific test categories for each layer</li> <li> <p>Implement tenant-aware testing</p> </li> <li> <p>Infrastructure Enhancements</p> </li> <li>Implement tenant middleware</li> <li>Add schema routing logic</li> <li> <p>Set up proper permission registry</p> </li> <li> <p>Documentation Updates</p> </li> <li>Update API documentation to reflect domain structure</li> <li>Document cross-domain interactions</li> <li>Detail tenant isolation patterns</li> </ol>"},{"location":"dev-log/backend-planing/architecture_analysis/#implementation-priority","title":"Implementation Priority","text":"<ol> <li>Base domain structure reorganization</li> <li>Multi-tenant infrastructure setup</li> <li>Permission system enhancement</li> <li>Testing structure alignment</li> <li>Documentation updates</li> </ol>"},{"location":"dev-log/backend-planing/architecture_analysis/#migration-strategy","title":"Migration Strategy","text":"<ol> <li>Create new domain-based structure</li> <li>Gradually migrate existing components</li> <li>Implement infrastructure changes</li> <li>Update tests to match new structure</li> <li>Verify system integrity</li> </ol>"},{"location":"dev-log/backend-planing/architecture_decision_record/","title":"Architecture Decision Record (ADR)","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The application requires a scalable, maintainable, and well-structured backend architecture that supports: - Multi-tenant data isolation - Role-based access control - Domain-driven design principles - Clean separation of concerns - Testable and maintainable code</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#design-decisions","title":"Design Decisions","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#1-domain-driven-architecture","title":"1. Domain-Driven Architecture","text":"<p>Decision: Implement a domain-driven design with clear bounded contexts</p> <p>Rationale: - Better organization of business logic - Clear separation of concerns - Improved maintainability - Scalable structure for future growth</p> <p>Consequences: - More initial setup required - Steeper learning curve - Better long-term maintainability - Clearer business logic representation</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#2-layer-separation","title":"2. Layer Separation","text":"<p>Decision: Implement four distinct layers: API, Service, Domain, and Infrastructure</p> <p>Rationale: - Clear separation of concerns - Independent testing of each layer - Easier maintenance and updates - Better code organization</p> <p>Structure: <pre><code>app/\n\u251c\u2500\u2500 api/          # API Layer\n\u251c\u2500\u2500 service/      # Service Layer\n\u251c\u2500\u2500 domain/       # Domain Layer\n\u2514\u2500\u2500 infrastructure/ # Infrastructure Layer\n</code></pre></p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#3-repository-pattern","title":"3. Repository Pattern","text":"<p>Decision: Use the repository pattern with domain-specific repositories</p> <p>Rationale: - Abstracts data persistence - Enables easier testing - Supports different data sources - Maintains domain isolation</p> <p>Implementation: - Repository interfaces in domain layer - Implementations in infrastructure layer - Unit of Work pattern for transactions - Query specifications for complex queries</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#4-dependency-injection","title":"4. Dependency Injection","text":"<p>Decision: Implement a custom dependency injection container</p> <p>Rationale: - Loose coupling between components - Easier testing and mocking - Flexible configuration - Clear service lifecycles</p> <p>Features: - Service registration - Lifetime management - Scoped containers - Testing support</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#5-multi-tenant-architecture","title":"5. Multi-Tenant Architecture","text":"<p>Decision: Implement schema-based multi-tenancy</p> <p>Rationale: - Strong data isolation - Flexible tenant-specific customization - Simplified backup and restore - Better security model</p> <p>Implementation: - Tenant middleware - Schema routing - Connection pooling - Tenant-specific configurations</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#6-security-model","title":"6. Security Model","text":"<p>Decision: Implement layered security with RBAC</p> <p>Rationale: - Fine-grained access control - Tenant-specific permissions - Audit capability - Flexible role management</p> <p>Components: - Permission registry - Role resolver - Access decision maker - Audit logging</p>"},{"location":"dev-log/backend-planing/architecture_decision_record/#technical-stack","title":"Technical Stack","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#core-framework","title":"Core Framework","text":"<ul> <li>FastAPI for API development</li> <li>Pydantic for data validation</li> <li>SQLModel for ORM</li> <li>Alembic for migrations</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#storage","title":"Storage","text":"<ul> <li>PostgreSQL for primary database</li> <li>Redis for caching</li> <li>S3 for file storage</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#authentication","title":"Authentication","text":"<ul> <li>JWT for tokens</li> <li>Bcrypt for password hashing</li> <li>Role-based authorization</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#testing","title":"Testing","text":"<ul> <li>Pytest for testing framework</li> <li>Coverage for test coverage</li> <li>Factory Boy for test data</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#1-code-organization","title":"1. Code Organization","text":"<ul> <li>Each domain in its own module</li> <li>Clear interface definitions</li> <li>Consistent file naming</li> <li>Documentation requirements</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#2-testing-strategy","title":"2. Testing Strategy","text":"<ul> <li>Unit tests for domain logic</li> <li>Integration tests for APIs</li> <li>Performance tests</li> <li>Security tests</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Domain-specific exceptions</li> <li>Global error handler</li> <li>Structured error responses</li> <li>Detailed logging</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#4-performance-considerations","title":"4. Performance Considerations","text":"<ul> <li>Query optimization</li> <li>Caching strategy</li> <li>Connection pooling</li> <li>Async operations</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#migration-strategy","title":"Migration Strategy","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#phase-1-foundation","title":"Phase 1: Foundation","text":"<ol> <li>Set up basic project structure</li> <li>Implement core infrastructure</li> <li>Configure basic authentication</li> </ol>"},{"location":"dev-log/backend-planing/architecture_decision_record/#phase-2-domain-implementation","title":"Phase 2: Domain Implementation","text":"<ol> <li>Set up first domain module</li> <li>Implement repository pattern</li> <li>Add service layer</li> </ol>"},{"location":"dev-log/backend-planing/architecture_decision_record/#phase-3-multi-tenancy","title":"Phase 3: Multi-tenancy","text":"<ol> <li>Implement tenant middleware</li> <li>Set up schema routing</li> <li>Add tenant-specific configurations</li> </ol>"},{"location":"dev-log/backend-planing/architecture_decision_record/#phase-4-security","title":"Phase 4: Security","text":"<ol> <li>Implement RBAC</li> <li>Add permission system</li> <li>Set up audit logging</li> </ol>"},{"location":"dev-log/backend-planing/architecture_decision_record/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"dev-log/backend-planing/architecture_decision_record/#1-metrics","title":"1. Metrics","text":"<ul> <li>Request/response times</li> <li>Error rates</li> <li>Database performance</li> <li>Cache hit rates</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#2-logging","title":"2. Logging","text":"<ul> <li>Structured logging</li> <li>Error tracking</li> <li>Audit trails</li> <li>Performance monitoring</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#3-documentation","title":"3. Documentation","text":"<ul> <li>API documentation</li> <li>Architecture documentation</li> <li>Deployment guides</li> <li>Development guidelines</li> </ul>"},{"location":"dev-log/backend-planing/architecture_decision_record/#success-criteria","title":"Success Criteria","text":"<ol> <li>Performance</li> <li>Response times &lt; 200ms</li> <li>99.9% uptime</li> <li> <p>Efficient resource usage</p> </li> <li> <p>Maintainability</p> </li> <li>Clear code organization</li> <li>Comprehensive documentation</li> <li>Automated testing</li> <li> <p>Easy deployment</p> </li> <li> <p>Scalability</p> </li> <li>Horizontal scaling capability</li> <li>Efficient multi-tenant support</li> <li> <p>Resource isolation</p> </li> <li> <p>Security</p> </li> <li>Strong data isolation</li> <li>Audit capability</li> <li>Access control</li> <li>Secure authentication</li> </ol> <p>These architectural decisions provide a solid foundation for building a scalable, maintainable, and secure application while ensuring clear guidelines for implementation and future development.</p>"},{"location":"dev-log/backend-planing/architecture_verification/","title":"Architecture Verification Checklist","text":""},{"location":"dev-log/backend-planing/architecture_verification/#1-layer-separation","title":"1. Layer Separation \u2713","text":"<ul> <li> API Layer properly isolated</li> <li> Service Layer responsibilities defined</li> <li> Domain Layer encapsulation established</li> <li> Infrastructure Layer boundaries set</li> <li> Clear interaction patterns between layers</li> <li> No layer bypass violations</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#2-domain-organization","title":"2. Domain Organization \u2713","text":"<ul> <li> Domain modules properly structured</li> <li> Business logic encapsulation</li> <li> Domain events handling</li> <li> Value objects implementation</li> <li> Aggregate patterns defined</li> <li> Domain services separation</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#3-repository-pattern","title":"3. Repository Pattern \u2713","text":"<ul> <li> Repository interfaces in domain layer</li> <li> Implementation in infrastructure layer</li> <li> Unit of Work pattern</li> <li> Query specifications</li> <li> Transaction management</li> <li> Multi-tenant support</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#4-dependency-injection","title":"4. Dependency Injection \u2713","text":"<ul> <li> Service registration</li> <li> Lifetime management</li> <li> Scope handling</li> <li> Testing support</li> <li> Configuration patterns</li> <li> FastAPI integration</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#5-multi-tenant-architecture","title":"5. Multi-Tenant Architecture \u2713","text":"<ul> <li> Schema-based isolation</li> <li> Tenant middleware</li> <li> Connection pooling</li> <li> Tenant-specific configurations</li> <li> Data access patterns</li> <li> Security boundaries</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#6-security-implementation","title":"6. Security Implementation \u2713","text":"<ul> <li> Authentication flow</li> <li> Authorization patterns</li> <li> RBAC implementation</li> <li> Permission system</li> <li> Audit logging</li> <li> Security middleware</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#7-infrastructure-components","title":"7. Infrastructure Components \u2713","text":"<ul> <li> Database access</li> <li> Caching strategy</li> <li> File storage</li> <li> Email handling</li> <li> External services</li> <li> Background tasks</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#8-testing-strategy","title":"8. Testing Strategy \u2713","text":"<ul> <li> Unit testing approach</li> <li> Integration testing</li> <li> Test organization</li> <li> Mock patterns</li> <li> Test data management</li> <li> Coverage requirements</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#9-error-handling","title":"9. Error Handling \u2713","text":"<ul> <li> Exception hierarchy</li> <li> Global error handling</li> <li> Domain-specific errors</li> <li> Error responses</li> <li> Logging strategy</li> <li> Monitoring approach</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#10-documentation","title":"10. Documentation \u2713","text":"<ul> <li> Architecture overview</li> <li> Implementation guidelines</li> <li> API documentation</li> <li> Development setup</li> <li> Deployment guide</li> <li> Maintenance procedures</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#architecture-alignment-status","title":"Architecture Alignment Status","text":""},{"location":"dev-log/backend-planing/architecture_verification/#strengths","title":"Strengths","text":"<ol> <li>Clear separation of concerns</li> <li>Well-defined domain boundaries</li> <li>Robust multi-tenant support</li> <li>Comprehensive security model</li> <li>Flexible dependency injection</li> </ol>"},{"location":"dev-log/backend-planing/architecture_verification/#verification-results","title":"Verification Results","text":"<ul> <li>Layer Boundaries: Properly Defined \u2713</li> <li>Domain Organization: Well Structured \u2713</li> <li>Data Access Patterns: Clearly Implemented \u2713</li> <li>Security Model: Comprehensive \u2713</li> <li>Testing Strategy: Complete \u2713</li> </ul>"},{"location":"dev-log/backend-planing/architecture_verification/#implementation-guidelines","title":"Implementation Guidelines","text":"<ol> <li>Follow domain-driven structure strictly</li> <li>Maintain layer isolation</li> <li>Use dependency injection consistently</li> <li>Implement proper error handling</li> <li>Maintain comprehensive testing</li> </ol>"},{"location":"dev-log/backend-planing/architecture_verification/#next-steps","title":"Next Steps","text":"<ol> <li>Create domain module templates</li> <li>Set up CI/CD pipelines</li> <li>Implement monitoring</li> <li>Establish deployment procedures</li> <li>Create development guidelines</li> </ol>"},{"location":"dev-log/backend-planing/architecture_verification/#conclusion","title":"Conclusion","text":"<p>The architecture planning is complete and aligns with all specified requirements. The system design provides:</p> <ol> <li>Scalability</li> <li>Clean domain separation</li> <li>Multi-tenant support</li> <li> <p>Efficient resource usage</p> </li> <li> <p>Maintainability</p> </li> <li>Clear code organization</li> <li>Well-defined patterns</li> <li> <p>Comprehensive documentation</p> </li> <li> <p>Security</p> </li> <li>Strong data isolation</li> <li>Robust access control</li> <li> <p>Complete audit capability</p> </li> <li> <p>Testability</p> </li> <li>Isolated components</li> <li>Mock support</li> <li>Clear test structure</li> </ol> <p>The architecture is ready for implementation, with all necessary patterns and practices defined and documented.</p>"},{"location":"dev-log/backend-planing/ast-rop-metric/","title":"ROP Conformity Metric Tool Planning","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#overview","title":"Overview","text":"<p>A Flake8 extension to analyze Python code and provide a deterministic metric for Railway-Oriented Programming (ROP) conformity. The tool will leverage Flake8's AST processing capabilities to identify patterns and anti-patterns, assigning penalty points for violations.</p>"},{"location":"dev-log/backend-planing/ast-rop-metric/#technical-approach","title":"Technical Approach","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#1-analysis-engine-selection","title":"1. Analysis Engine Selection","text":"<p>We'll implement this as a Flake8 extension because: - Integrates with existing Python tooling ecosystem - Provides robust AST handling infrastructure - Can be used with existing IDE integrations - Supports parallel file processing out of the box - Can be combined with other Flake8 plugins</p>"},{"location":"dev-log/backend-planing/ast-rop-metric/#2-detailed-rop-rules-and-scoring","title":"2. Detailed ROP Rules and Scoring","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#critical-violations-rop1xx-5-points-each","title":"Critical Violations (ROP1XX - 5 points each)","text":"<ol> <li>Control Flow Violations</li> <li>ROP101: Try/Except blocks detected (use Result instead)</li> <li>ROP102: For/While loops detected (use map/filter/functional operations)</li> <li>ROP103: If/Else statements outside pattern matching</li> <li>ROP104: Direct exception raising (use Error return)</li> <li> <p>ROP105: Return None or Optional usage (use Option type)</p> </li> <li> <p>State Management Violations</p> </li> <li>ROP110: Mutable class attributes (missing @dataclass(frozen=True))</li> <li>ROP111: Global variable usage</li> <li>ROP112: Class or instance variable modification</li> <li>ROP113: List/Dict/Set mutation methods (append, update, etc.)</li> <li> <p>ROP114: Assignment to function parameters</p> </li> <li> <p>Railway Pattern Violations</p> </li> <li>ROP120: Missing Result type for functions that can fail</li> <li>ROP121: Direct access to Result.value/error (use pattern matching)</li> <li>ROP122: Missing error handling in pipeline</li> <li>ROP123: Mixing Result with exception handling</li> <li> <p>ROP124: Using async/await instead of @effect.result</p> </li> <li> <p>Pydantic Model Violations</p> </li> <li>ROP130: Non-immutable Pydantic model (missing ConfigDict(frozen=True))</li> <li>ROP131: Direct model instantiation without Result (not using create factory)</li> <li>ROP132: Exception raising in model validators</li> <li>ROP133: Mutable model defaults (lists, dicts)</li> <li>ROP134: Direct model attribute modification</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#major-violations-rop2xx-3-points-each","title":"Major Violations (ROP2XX - 3 points each)","text":"<ol> <li>Type System Violations</li> <li>ROP201: Missing type hints</li> <li>ROP202: Using Any type</li> <li>ROP203: Missing Result/Option type annotations</li> <li>ROP204: Incorrect Result/Option generic types</li> <li> <p>ROP205: Using Union instead of tagged_union</p> </li> <li> <p>Functional Pattern Violations</p> </li> <li>ROP210: Using .bind() method (use pipeline or @effect.result)</li> <li>ROP211: Direct attribute access without pattern matching</li> <li>ROP212: Missing pipeline for sequential Result operations</li> <li>ROP213: Non-pure functions (side effects)</li> <li> <p>ROP214: Missing static factory methods for tagged_union</p> </li> <li> <p>Data Model Violations</p> </li> <li>ROP220: Non-frozen dataclasses</li> <li>ROP221: Missing immutable collections (using list instead of tuple)</li> <li>ROP222: Mutable default arguments</li> <li>ROP223: Missing validation in data models</li> <li> <p>ROP224: Direct attribute modification</p> </li> <li> <p>Pydantic Pattern Violations</p> </li> <li>ROP230: Missing model_validator decorators</li> <li>ROP231: Missing ImmutableModel base class</li> <li>ROP232: Incorrect validator mode (not using 'after')</li> <li>ROP233: Missing create factory method</li> <li>ROP234: Incorrect error handling in validators</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#minor-violations-rop3xx-1-point-each","title":"Minor Violations (ROP3XX - 1 point each)","text":"<ol> <li>Documentation Violations</li> <li>ROP301: Missing docstrings in functions</li> <li>ROP302: Non-descriptive error messages</li> <li>ROP303: Missing type documentation</li> <li>ROP304: Missing error case documentation</li> <li>ROP305: Missing pipeline step documentation</li> <li>ROP306: Multi-line docstring detected (must be single line)</li> <li>ROP307: Empty docstring</li> <li> <p>ROP308: Docstring with redundant type information</p> </li> <li> <p>Import Violations</p> </li> <li>ROP310: Missing required expression imports</li> <li>ROP311: Unused expression imports</li> <li>ROP312: Star imports</li> <li>ROP313: Relative imports</li> <li> <p>ROP314: Missing future annotations import</p> </li> <li> <p>Style Violations</p> </li> <li>ROP320: Non-descriptive Result error messages</li> <li>ROP321: Inconsistent pattern matching style</li> <li>ROP322: Complex pattern matching (too many cases)</li> <li>ROP323: Missing line breaks in long pipelines</li> <li>ROP324: Inconsistent Result/Option naming</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#3-pattern-detection-rules","title":"3. Pattern Detection Rules","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#required-imports-detection","title":"Required Imports Detection","text":"<pre><code>REQUIRED_IMPORTS = {\n    'expression': [\n        'Result', 'Ok', 'Error',\n        'Option', 'Some', 'Nothing',\n        'effect', 'pipeline', 'pipe',\n        'tagged_union', 'case', 'tag'\n    ],\n    'typing': ['TypeVar', 'TypeAlias', 'Self'],\n    'collections.abc': ['Callable', 'Awaitable', 'Generator'],\n    'pydantic': ['BaseModel', 'ConfigDict', 'model_validator', 'TypeAdapter']\n}\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#pattern-matching-detection","title":"Pattern Matching Detection","text":"<pre><code>VALID_PATTERN_MATCH = '''\nmatch result:\n    case Ok(value) if isinstance(value, dict):\n        # handle dict success\n    case Ok(value):\n        # handle other success\n    case Error(msg) if \"database\" in str(msg):\n        # handle database errors\n    case Error():\n        # handle other errors\n'''\n\nINVALID_PATTERN_MATCH = '''\nif isinstance(result, Ok):\n    value = result.value\n    if isinstance(value, dict):\n        # handle dict\nelse:\n    error = result.error\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#type-annotation-examples","title":"Type Annotation Examples","text":"<pre><code>type Point = tuple[float, float]\ntype JsonDict = dict[str, \"JsonValue\"]\ntype JsonValue = str | int | float | bool | None | JsonDict | list[JsonValue]\n\ndef process_data(data: JsonDict) -&gt; Result[JsonValue, str]:\n    match data:\n        case {\"type\": \"point\", \"coords\": [x, y]}:\n            return Ok((float(x), float(y)))\n        case _:\n            return Error(\"Invalid data format\")\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#pipeline-pattern-detection","title":"Pipeline Pattern Detection","text":"<pre><code>VALID_PIPELINE = '''\nresult = pipeline(\n    validate_data,\n    transform_data,\n    save_data\n)(data)\n'''\n\nINVALID_PIPELINE = '''\nresult1 = validate_data(data)\nif is_ok(result1):\n    result2 = transform_data(result1.value)\n    if is_ok(result2):\n        result3 = save_data(result2.value)\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#pydantic-model-pattern-detection","title":"Pydantic Model Pattern Detection","text":"<pre><code>VALID_PYDANTIC_MODEL = '''\nfrom typing import Self\n\nclass ImmutableModel(BaseModel):\n    \"\"\"Base model for all Pydantic models in ROP style\"\"\"\n    model_config = ConfigDict(frozen=True, strict=True)\n\n    @classmethod\n    def create(cls: type[Self], **data) -&gt; Result[Self, str]:\n        try:\n            adapter = TypeAdapter(cls)\n            instance = adapter.validate_python(data)\n            return Ok(instance)\n        except Exception as e:\n            return Error(str(e))\n\nclass User(ImmutableModel):\n    name: str\n    email: str\n\n    @model_validator(mode='after')\n    def validate_user(self) -&gt; Self:\n        # validation logic\n        return self\n'''\n\nINVALID_PYDANTIC_MODEL = '''\nclass User(BaseModel):\n    name: str\n    email: str\n\n    def validate(self) -&gt; \"User\":\n        if not self.email:\n            raise ValueError(\"Email required\")\n        return self\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#effect-pattern-detection","title":"Effect Pattern Detection","text":"<pre><code>VALID_EFFECT = '''\n@effect.result[str, str]()\ndef process_user(user_id: str) -&gt; Result[str, str]:\n    user = yield from fetch_user(user_id)\n    match user:\n        case {\"status\": \"active\", **data}:\n            return Ok(f\"User {data['name']} is active\")\n        case _:\n            return Error(\"Invalid user data\")\n'''\n\nINVALID_EFFECT = '''\nasync def process_user(user_id: str):\n    try:\n        user = await fetch_user(user_id)\n        if user[\"status\"] == \"active\":\n            return user[\"name\"]\n    except Exception as e:\n        return None\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#pydantic-validation-pattern-detection","title":"Pydantic Validation Pattern Detection","text":"<pre><code>VALID_VALIDATION = '''\n@model_validator(mode='after')\ndef validate_order(self) -&gt; 'Order':\n    if len(self.items) == 0 and self.total &gt; 0:\n        raise ValueError(\"Cannot have total &gt; 0 with no items\")\n    return self\n'''\n\nINVALID_VALIDATION = '''\ndef validate(self):\n    if len(self.items) == 0 and self.total &gt; 0:\n        return False\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#docstring-pattern-detection","title":"Docstring Pattern Detection","text":"<pre><code>VALID_DOCSTRING = '''\ndef process_user(name: str) -&gt; Result[User, str]:\n    \"\"\"Creates a new user with validation and returns Result.\"\"\"\n    # function implementation\n'''\n\nINVALID_DOCSTRING_MULTILINE = '''\ndef process_user(name: str) -&gt; Result[User, str]:\n    \"\"\"Creates a new user with validation and returns Result.\n\n    Args:\n        name: The user's name\n    Returns:\n        Result containing the user or error\n    \"\"\"\n    # function implementation\n'''\n\nINVALID_DOCSTRING_TYPE_INFO = '''\ndef process_user(name: str) -&gt; Result[User, str]:\n    \"\"\"Takes a string name and returns Result[User, str].\"\"\"\n    # function implementation\n'''\n\nINVALID_DOCSTRING_EMPTY = '''\ndef process_user(name: str) -&gt; Result[User, str]:\n    \"\"\"\"\"\"\n    # function implementation\n'''\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#4-auto-fix-suggestions","title":"4. Auto-fix Suggestions","text":"<ol> <li> <p>Control Flow Fixes <pre><code># Before\ntry:\n    result = risky_operation()\nexcept Exception as e:\n    handle_error(e)\n\n# After\ndef risky_operation() -&gt; Result[str, str]:\n    match condition:\n        case True: return Ok(\"success\")\n        case False: return Error(\"operation failed\")\n</code></pre></p> </li> <li> <p>Loop Fixes <pre><code># Before\nresults = []\nfor x in items:\n    results.append(process(x))\n\n# After\nresults = list(map(process, items))\n</code></pre></p> </li> <li> <p>Pattern Matching Fixes <pre><code># Before\nif is_ok(result):\n    value = result.value\nelse:\n    error = result.error\n\n# After\nmatch result:\n    case Ok(value):\n        handle_success(value)\n    case Error(error):\n        handle_error(error)\n</code></pre></p> </li> <li> <p>Pydantic Model Fixes <pre><code># Before (Old style)\nclass User(BaseModel):\n    name: str\n    email: str\n\n    class Config:\n        validate_assignment = True\n\n    def __init__(self, **data):\n        try:\n            super().__init__(**data)\n        except Exception as e:\n            raise ValueError(str(e))\n\n# After (Python 3.12 + Pydantic 2.0)\nfrom typing import Self\n\nclass User(ImmutableModel):\n    name: str\n    email: str\n\n    model_config = ConfigDict(\n        frozen=True,\n        strict=True,\n        validate_assignment=True\n    )\n\n    @classmethod\n    def create(cls: type[Self], **data) -&gt; Result[Self, str]:\n        try:\n            adapter = TypeAdapter(cls)\n            instance = adapter.validate_python(data)\n            return Ok(instance)\n        except Exception as e:\n            return Error(str(e))\n</code></pre></p> </li> <li> <p>Pydantic Validation Fixes <pre><code># Before\ndef validate_total(self):\n    if self.total &lt; 0:\n        raise ValueError(\"Total cannot be negative\")\n\n# After\n@model_validator(mode='after')\ndef validate_total(self) -&gt; 'Order':\n    if self.total &lt; 0:\n        raise ValueError(\"Total cannot be negative\")\n    return self\n</code></pre></p> </li> <li> <p>Docstring Fixes <pre><code># Before (Multi-line with type info)\ndef validate_user(user: User) -&gt; Result[User, str]:\n    \"\"\"Validates user data and returns Result.\n\n    Args:\n        user: User instance to validate\n    Returns:\n        Result[User, str]: Validated user or error\n    \"\"\"\n    # implementation\n\n# After (Single line, no type info)\ndef validate_user(user: User) -&gt; Result[User, str]:\n    \"\"\"Validates user data and returns success or validation errors.\"\"\"\n    # implementation\n\n# Before (Empty or meaningless)\ndef process_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"Process data\"\"\"  # Too vague\n    # implementation\n\n# After (Descriptive single line)\ndef process_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"Transforms raw data into normalized format with validation.\"\"\"\n    # implementation\n</code></pre></p> </li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#5-flake8-extension-structure","title":"5. Flake8 Extension Structure","text":"<pre><code>from flake8.options.manager import OptionManager\nfrom flake8_rop.visitor import ROPVisitor\n\nclass ROPChecker:\n    name = 'flake8-rop'\n    version = '0.1.0'\n\n    # Error codes prefix with ROP\n    # ROP1XX: Critical violations\n    # ROP2XX: Major violations\n    # ROP3XX: Minor violations\n\n    def __init__(self, tree, filename):\n        self.tree = tree\n        self.filename = filename\n\n    @classmethod\n    def add_options(cls, parser: OptionManager):\n        parser.add_option(\n            '--rop-score-threshold',\n            type=int,\n            default=10,\n            help='Maximum allowed ROP violation score'\n        )\n\n    def run(self):\n        visitor = ROPVisitor(self.filename)\n        visitor.visit(self.tree)\n        for violation in visitor.violations:\n            yield (\n                violation['line'],\n                violation['col'],\n                f\"ROP{violation['code']}: {violation['message']}\",\n                type(self)\n            )\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#6-configuration-options","title":"6. Configuration Options","text":"<pre><code># setup.cfg or .flake8\n[flake8]\nrop-score-threshold = 10\nrop-ignore = ROP301,ROP302\nrop-select = ROP1XX,ROP2XX\nmax-complexity = 10\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#phase-1-core-extension-mvp","title":"Phase 1: Core Extension (MVP)","text":"<ol> <li>Basic Flake8 plugin setup</li> <li>Critical violation detection</li> <li>Error code system</li> <li>Basic configuration</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#phase-2-enhanced-analysis","title":"Phase 2: Enhanced Analysis","text":"<ol> <li>Type hint verification</li> <li>Pattern matching detection</li> <li>Custom options handling</li> <li>Detailed error messages</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#phase-3-advanced-features","title":"Phase 3: Advanced Features","text":"<ol> <li>Auto-fix suggestions via <code>flake8-fix</code></li> <li>Score calculation and reporting</li> <li>Integration with popular IDEs</li> <li>Performance optimization</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#code-structure","title":"Code Structure","text":"<pre><code>flake8_rop/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 checker.py        # Main Flake8 plugin class\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 visitor.py    # AST visitor implementation\n\u2502   \u251c\u2500\u2500 rules.py      # Violation rules\n\u2502   \u2514\u2500\u2500 scoring.py    # Scoring logic\n\u251c\u2500\u2500 fixes/           # Auto-fix suggestions\n\u2502   \u251c\u2500\u2500 loops.py\n\u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2514\u2500\u2500 patterns.py\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 ast_helpers.py\n    \u2514\u2500\u2500 type_analysis.py\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#installation-and-usage","title":"Installation and Usage","text":"<pre><code># Installation\npip install flake8-rop\n\n# Usage\nflake8 path/to/code/\n\n# With specific options\nflake8 --rop-score-threshold=15 path/to/code/\n\n# Generate detailed report\nflake8 --format=rop-report path/to/code/\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#integration-examples","title":"Integration Examples","text":""},{"location":"dev-log/backend-planing/ast-rop-metric/#vs-code-settingsjson","title":"VS Code settings.json","text":"<pre><code>{\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.flake8Args\": [\n        \"--rop-score-threshold=10\",\n        \"--rop-select=ROP1XX,ROP2XX\"\n    ]\n}\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#pre-commit-configuration","title":"Pre-commit Configuration","text":"<pre><code>repos:\n-   repo: https://github.com/pycqa/flake8\n    rev: '6.1.0'\n    hooks:\n    -   id: flake8\n        additional_dependencies: [flake8-rop]\n        args: [--rop-score-threshold=10]\n</code></pre>"},{"location":"dev-log/backend-planing/ast-rop-metric/#testing-strategy","title":"Testing Strategy","text":"<ol> <li> <p>Unit Tests:    <pre><code>def test_try_except_violation():\n    code = '''\n    try:\n        do_something()\n    except Exception:\n        handle_error()\n    '''\n    tree = ast.parse(code)\n    checker = ROPChecker(tree, 'test.py')\n    errors = list(checker.run())\n    assert len(errors) == 1\n    assert errors[0][2].startswith('ROP101')\n</code></pre></p> </li> <li> <p>Integration Tests:</p> </li> <li>Full Flake8 pipeline testing</li> <li>Configuration handling</li> <li>Multiple file analysis</li> <li> <p>Plugin interactions</p> </li> <li> <p>Performance Tests:</p> </li> <li>Large codebase analysis</li> <li>Memory usage monitoring</li> <li>Processing time benchmarks</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#benefits-of-flake8-integration","title":"Benefits of Flake8 Integration","text":"<ol> <li>Ecosystem Benefits:</li> <li>Works with existing CI/CD pipelines</li> <li>IDE integration out of the box</li> <li>Compatible with other Flake8 extensions</li> <li> <p>Familiar configuration format</p> </li> <li> <p>Technical Benefits:</p> </li> <li>Robust AST handling</li> <li>Parallel file processing</li> <li>Standardized error reporting</li> <li> <p>Plugin system for extensions</p> </li> <li> <p>User Experience:</p> </li> <li>Familiar interface</li> <li>Standard installation process</li> <li>Configurable severity levels</li> <li>IDE integration</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#development-roadmap","title":"Development Roadmap","text":"<ol> <li>Week 1: Basic Extension</li> <li>Flake8 plugin structure</li> <li>Basic AST visitor</li> <li> <p>Error code system</p> </li> <li> <p>Week 2-3: Core Rules</p> </li> <li>Critical violation detection</li> <li>Configuration handling</li> <li> <p>Basic reporting</p> </li> <li> <p>Week 4: Enhanced Features</p> </li> <li>Advanced pattern detection</li> <li>Scoring system</li> <li> <p>Documentation</p> </li> <li> <p>Week 5-6: Polish &amp; Release</p> </li> <li>Testing</li> <li>Performance optimization</li> <li>PyPI release</li> <li>Documentation</li> </ol>"},{"location":"dev-log/backend-planing/ast-rop-metric/#docstring-guidelines","title":"Docstring Guidelines","text":"<ol> <li>Single Line Rule</li> <li>Must be exactly one line</li> <li>No line breaks</li> <li>No empty lines</li> <li> <p>Maximum length of 100 characters</p> </li> <li> <p>Content Rules</p> </li> <li>Focus on WHAT the function does, not HOW</li> <li>No type information (types go in annotations)</li> <li>No parameter descriptions (clear parameter names instead)</li> <li> <p>No return value descriptions (clear return type instead)</p> </li> <li> <p>Style Rules</p> </li> <li>Start with a capital letter</li> <li>End with a period</li> <li>Use active voice</li> <li> <p>Be descriptive but concise</p> </li> <li> <p>Examples of Good Docstrings <pre><code>def validate_email(email: str) -&gt; Result[str, str]:\n    \"\"\"Ensures email format is valid and domain exists.\"\"\"\n\ndef process_order(order: Order) -&gt; Result[Order, str]:\n    \"\"\"Validates and processes order with inventory and payment checks.\"\"\"\n\ndef transform_data(data: JsonDict) -&gt; Result[NormalizedData, str]:\n    \"\"\"Normalizes raw JSON data into standard internal format.\"\"\"\n\n@effect.result[User, str]()\ndef create_user(data: dict) -&gt; Result[User, str]:\n    \"\"\"Creates new user with validation and permission checks.\"\"\"\n</code></pre></p> </li> <li> <p>Examples of Bad Docstrings <pre><code>def validate_email(email: str) -&gt; Result[str, str]:\n    \"\"\"This function takes an email string and returns a Result[str, str].\"\"\"  # No type info\n\ndef process_order(order: Order) -&gt; Result[Order, str]:\n    \"\"\"Processes the order.\n    Returns success or error.\"\"\"  # No multi-line\n\ndef transform_data(data: JsonDict) -&gt; Result[NormalizedData, str]:\n    \"\"\"Takes data and transforms it.\"\"\"  # Too vague\n\n@effect.result[User, str]()\ndef create_user(data: dict) -&gt; Result[User, str]:\n    \"\"\"Creates user by taking the data dict and validating each field\n    then saving to database if valid.\"\"\"  # Too detailed/multi-line\n</code></pre></p> </li> </ol>"},{"location":"dev-log/backend-planing/backend-plan/","title":"Backend Technical Design Document","text":""},{"location":"dev-log/backend-planing/backend-plan/#core-dependencies","title":"Core Dependencies","text":""},{"location":"dev-log/backend-planing/backend-plan/#framework-and-api","title":"Framework and API","text":"<ul> <li>FastAPI: Main web framework</li> <li>Request handling and routing</li> <li>Dependency injection</li> <li>OpenAPI/Swagger integration</li> <li>WebSocket support</li> <li>Background tasks</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#database-and-orm","title":"Database and ORM","text":"<ul> <li>SQLModel + SQLAlchemy: Database ORM and modeling</li> <li>Model definitions</li> <li>Query building</li> <li>Relationship management</li> <li> <p>Type safety integration</p> </li> <li> <p>Alembic: Database migrations</p> </li> <li>Schema version control</li> <li>Migration generation</li> <li>Upgrade/downgrade operations</li> <li>Multi-tenant schema management</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#file-and-media-handling","title":"File and Media Handling","text":"<ul> <li>python-multipart: File upload handling</li> <li>Multipart form data processing</li> <li>File streaming</li> <li> <p>Memory-efficient uploads</p> </li> <li> <p>boto3: AWS S3 Integration</p> </li> <li>File storage operations</li> <li>Bucket management</li> <li>Access control</li> <li>Pre-signed URLs</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#email-and-templates","title":"Email and Templates","text":"<ul> <li>emails: Email handling</li> <li>SMTP integration</li> <li>HTML email support</li> <li> <p>Email queue management</p> </li> <li> <p>Jinja2: Template engine</p> </li> <li>Email template rendering</li> <li>Dynamic content generation</li> <li>Template inheritance</li> <li>Custom filters and extensions</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#security-and-authentication","title":"Security and Authentication","text":"<ul> <li>python-jose[cryptography]: JWT handling</li> <li>Token generation and validation</li> <li> <p>Encryption/decryption</p> </li> <li> <p>passlib[bcrypt]: Password hashing</p> </li> <li>Secure password storage</li> <li> <p>Hash verification</p> </li> <li> <p>python-multipart: Form data parsing</p> </li> <li>Authentication request handling</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#caching-and-performance","title":"Caching and Performance","text":"<ul> <li>Redis: Distributed caching</li> <li>Session storage</li> <li>Rate limiting</li> <li>Cache invalidation</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#testing-and-quality","title":"Testing and Quality","text":"<ul> <li>pytest: Testing framework</li> <li>Unit testing</li> <li>Integration testing</li> <li> <p>Fixtures and mocking</p> </li> <li> <p>httpx: HTTP client</p> </li> <li>API testing</li> <li> <p>External service integration</p> </li> <li> <p>coverage: Code coverage</p> </li> <li>Test coverage reporting</li> <li>Coverage enforcement</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[API Layer] --&gt; B[Service Layer]\n    B --&gt; C[Domain Layer]\n    C --&gt; D[Infrastructure Layer]\n    D --&gt; E[Database]\n    D --&gt; F[S3 Storage]\n\n    subgraph Infrastructure\n    D\n    E\n    F\n    end\n\n    subgraph Business Logic\n    B\n    C\n    end\n</code></pre>"},{"location":"dev-log/backend-planing/backend-plan/#core-architectural-principles","title":"Core Architectural Principles","text":""},{"location":"dev-log/backend-planing/backend-plan/#domain-driven-structure","title":"Domain-Driven Structure","text":"<ul> <li>Root directory organization by domain contexts</li> <li>Each domain module is self-contained with its routes, services, models, and repositories</li> <li>Cross-cutting concerns handled via middleware and shared utilities</li> </ul> <pre><code>app/\n\u251c\u2500\u2500 domains/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 permissions/\n\u2502   \u251c\u2500\u2500 files/\n\u2502   \u2514\u2500\u2500 tenant/\n\u251c\u2500\u2500 core/\n\u251c\u2500\u2500 infrastructure/\n\u2514\u2500\u2500 shared/\n</code></pre>"},{"location":"dev-log/backend-planing/backend-plan/#layer-separation","title":"Layer Separation","text":"<ol> <li>API Layer</li> <li>Route definitions and request/response handling</li> <li>Input validation and serialization</li> <li>Authentication and authorization middleware</li> <li> <p>API documentation via OpenAPI/Swagger</p> </li> <li> <p>Service Layer </p> </li> <li>Business logic orchestration</li> <li>Transaction management</li> <li>Cross-domain coordination</li> <li> <p>Event handling and dispatching</p> </li> <li> <p>Domain Layer</p> </li> <li>Business entities and value objects</li> <li>Domain-specific business rules</li> <li> <p>Interface definitions for repositories</p> </li> <li> <p>Infrastructure Layer</p> </li> <li>Database operations and migrations</li> <li>External service integrations</li> <li>Caching implementation</li> <li>File storage operations</li> </ol>"},{"location":"dev-log/backend-planing/backend-plan/#multi-tenant-architecture","title":"Multi-Tenant Architecture","text":"<pre><code>graph LR\n    A[Request] --&gt; B[Tenant Middleware]\n    B --&gt; C[Schema Router]\n    C --&gt; D[Public Schema]\n    C --&gt; E[Tenant Schema 1]\n    C --&gt; F[Tenant Schema 2]\n</code></pre>"},{"location":"dev-log/backend-planing/backend-plan/#schema-design","title":"Schema Design","text":"<ul> <li>Public schema for shared tables</li> <li>Tenant registry</li> <li>Global configurations</li> <li> <p>Shared lookup tables</p> </li> <li> <p>Tenant-specific schemas</p> </li> <li>Isolated data per tenant</li> <li>Independent configurations</li> <li>Tenant-specific business data</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#tenant-resolution","title":"Tenant Resolution","text":"<ul> <li>Header-based tenant identification</li> <li>Tenant context middleware</li> <li>Dynamic schema switching</li> <li>Connection pooling per tenant</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#permission-system","title":"Permission System","text":"<pre><code>graph TD\n    A[Endpoint Request] --&gt; B[Permission Middleware]\n    B --&gt; C[Permission Registry]\n    C --&gt; D[Tenant Config]\n    B --&gt; E[Role Resolver]\n    E --&gt; F[Access Decision]\n</code></pre>"},{"location":"dev-log/backend-planing/backend-plan/#components","title":"Components","text":"<ul> <li>Permission registry for endpoint-based access control</li> <li>Role-based access control (RBAC) implementation</li> <li>Tenant-specific permission configurations</li> <li>Permission inheritance and hierarchy support</li> <li>Caching layer for permission checks</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#data-persistence","title":"Data Persistence","text":""},{"location":"dev-log/backend-planing/backend-plan/#database-design","title":"Database Design","text":"<ul> <li>SQLAlchemy for ORM and query building</li> <li>SQLModel for Pydantic integration</li> <li>Alembic for schema migrations</li> <li>Transaction management and unit of work pattern</li> <li>Query optimization and indexing strategies</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Multi-level caching approach</li> <li>Redis for distributed caching</li> <li>Local memory caching for frequently accessed data</li> <li>Cache invalidation patterns</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#file-storage-integration","title":"File Storage Integration","text":""},{"location":"dev-log/backend-planing/backend-plan/#s3-integration","title":"S3 Integration","text":"<ul> <li>Abstracted storage interface</li> <li>Tenant-specific bucket/prefix strategy</li> <li>File metadata tracking</li> <li>Access control and signed URLs</li> <li>Bulk operation support</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#error-handling-logging","title":"Error Handling &amp; Logging","text":""},{"location":"dev-log/backend-planing/backend-plan/#error-management","title":"Error Management","text":"<ul> <li>Standardized error response format</li> <li>Domain-specific error types</li> <li>Error tracking and monitoring</li> <li>Graceful degradation strategies</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#logging-system","title":"Logging System","text":"<ul> <li>Structured logging format</li> <li>Log levels and categorization</li> <li>Correlation IDs for request tracking</li> <li>Performance monitoring integration</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#security-implementation","title":"Security Implementation","text":""},{"location":"dev-log/backend-planing/backend-plan/#authentication","title":"Authentication","text":"<ul> <li>JWT-based authentication</li> <li>Token refresh mechanism</li> <li>Session management</li> <li>MFA support structure</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#authorization","title":"Authorization","text":"<ul> <li>Role-based access control</li> <li>Permission verification middleware</li> <li>Resource-level access control</li> <li>Audit logging</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#code-generation-cli-tools","title":"Code Generation &amp; CLI Tools","text":""},{"location":"dev-log/backend-planing/backend-plan/#template-system","title":"Template System","text":"<ul> <li>Code generation templates for:</li> <li>Domain modules</li> <li>CRUD operations</li> <li>Service layers</li> <li>Test structures</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#cli-features","title":"CLI Features","text":"<ul> <li>Module scaffolding</li> <li>Migration management</li> <li>Tenant operations</li> <li>Permission management</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#testing-strategy","title":"Testing Strategy","text":""},{"location":"dev-log/backend-planing/backend-plan/#test-categories","title":"Test Categories","text":"<ul> <li>Unit tests for domain logic</li> <li>Integration tests for services</li> <li>API tests for endpoints</li> <li>Performance tests for critical paths</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#testing-principles","title":"Testing Principles","text":"<ul> <li>Isolated test environments per tenant</li> <li>Mock external dependencies</li> <li>Fixture-based test data</li> <li>Parallel test execution support</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#api-documentation","title":"API Documentation","text":""},{"location":"dev-log/backend-planing/backend-plan/#documentation-approach","title":"Documentation Approach","text":"<ul> <li>OpenAPI/Swagger integration</li> <li>Automated documentation generation</li> <li>Interactive API documentation</li> <li>Code example generation</li> </ul>"},{"location":"dev-log/backend-planing/backend-plan/#performance-considerations","title":"Performance Considerations","text":""},{"location":"dev-log/backend-planing/backend-plan/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>Query optimization</li> <li>Caching strategies</li> <li>Lazy loading patterns</li> <li>Bulk operation support</li> <li>Connection pooling</li> <li>Resource monitoring</li> </ul>"},{"location":"dev-log/backend-planing/dependency_injection/","title":"Dependency Injection and Service Configuration","text":""},{"location":"dev-log/backend-planing/dependency_injection/#core-principles","title":"Core Principles","text":""},{"location":"dev-log/backend-planing/dependency_injection/#1-dependency-injection-container","title":"1. Dependency Injection Container","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Dict, Type, Callable, Any\n\nclass Container:\n    def __init__(self):\n        self._services: Dict[Type, Callable[[], Any]] = {}\n\n    def register(self, interface: Type, factory: Callable[[], Any]) -&gt; None:\n        self._services[interface] = factory\n\n    def resolve(self, interface: Type) -&gt; Any:\n        factory = self._services.get(interface)\n        if not factory:\n            raise ValueError(f\"No registration found for {interface}\")\n        return factory()\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#2-service-registration","title":"2. Service Registration","text":"<pre><code>@dataclass\nclass Settings:\n    database_url: str\n    redis_url: str\n    aws_access_key: str\n    aws_secret_key: str\n\ndef configure_services(settings: Settings) -&gt; Container:\n    container = Container()\n\n    # Database\n    container.register(\n        Session,\n        lambda: create_session(settings.database_url)\n    )\n\n    # Repositories\n    container.register(\n        UserRepository,\n        lambda: PostgresUserRepository(container.resolve(Session))\n    )\n\n    # Services\n    container.register(\n        TokenService,\n        lambda: JWTTokenService(settings.jwt_secret)\n    )\n\n    return container\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#fastapi-integration","title":"FastAPI Integration","text":""},{"location":"dev-log/backend-planing/dependency_injection/#1-dependency-provider","title":"1. Dependency Provider","text":"<pre><code>from fastapi import Depends\nfrom typing import Annotated\n\nclass ServiceProvider:\n    def __init__(self, container: Container):\n        self._container = container\n\n    def get_user_repository(self) -&gt; UserRepository:\n        return self._container.resolve(UserRepository)\n\n    def get_user_service(\n        self,\n        repo: UserRepository = Depends(get_user_repository)\n    ) -&gt; UserService:\n        return UserService(repo)\n\n# Usage in FastAPI\nUserRepo = Annotated[UserRepository, Depends(provider.get_user_repository)]\nUserSvc = Annotated[UserService, Depends(provider.get_user_service)]\n\n@router.post(\"/users\")\ndef create_user(\n    data: UserCreate,\n    service: UserSvc\n):\n    return service.create_user(data)\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#2-middleware-configuration","title":"2. Middleware Configuration","text":"<pre><code>from fastapi import FastAPI\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\ndef configure_middlewares(app: FastAPI, container: Container) -&gt; None:\n    # Authentication\n    app.add_middleware(\n        AuthenticationMiddleware,\n        token_service=container.resolve(TokenService)\n    )\n\n    # Tenant\n    app.add_middleware(\n        TenantMiddleware,\n        tenant_service=container.resolve(TenantService)\n    )\n\n    # Logging\n    app.add_middleware(\n        LoggingMiddleware,\n        logger=container.resolve(Logger)\n    )\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#service-lifetime-management","title":"Service Lifetime Management","text":""},{"location":"dev-log/backend-planing/dependency_injection/#1-service-scopes","title":"1. Service Scopes","text":"<pre><code>from enum import Enum, auto\n\nclass ServiceLifetime(Enum):\n    SINGLETON = auto()\n    SCOPED = auto()\n    TRANSIENT = auto()\n\nclass ScopedContainer:\n    def __init__(self, parent: Container):\n        self._parent = parent\n        self._scoped_services: Dict[Type, Any] = {}\n\n    def resolve(self, interface: Type) -&gt; Any:\n        if interface in self._scoped_services:\n            return self._scoped_services[interface]\n\n        service = self._parent.resolve(interface)\n        self._scoped_services[interface] = service\n        return service\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#2-request-scope-management","title":"2. Request Scope Management","text":"<pre><code>class RequestScopeMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self,\n        app: ASGIApp,\n        container: Container\n    ):\n        super().__init__(app)\n        self._container = container\n\n    async def dispatch(\n        self,\n        request: Request,\n        call_next: RequestResponseEndpoint\n    ) -&gt; Response:\n        request.state.container = ScopedContainer(self._container)\n        response = await call_next(request)\n        return response\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#testing-support","title":"Testing Support","text":""},{"location":"dev-log/backend-planing/dependency_injection/#1-mock-service-registration","title":"1. Mock Service Registration","text":"<pre><code>def configure_test_services() -&gt; Container:\n    container = Container()\n\n    # Register mock services\n    container.register(\n        UserRepository,\n        lambda: MockUserRepository()\n    )\n\n    container.register(\n        TokenService,\n        lambda: MockTokenService()\n    )\n\n    return container\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#2-test-fixtures","title":"2. Test Fixtures","text":"<pre><code>import pytest\nfrom fastapi.testclient import TestClient\n\n@pytest.fixture\ndef app():\n    container = configure_test_services()\n    app = create_app(container)\n    return app\n\n@pytest.fixture\ndef client(app):\n    return TestClient(app)\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#configuration-management","title":"Configuration Management","text":""},{"location":"dev-log/backend-planing/dependency_injection/#1-settings-management","title":"1. Settings Management","text":"<pre><code>from pydantic_settings import BaseSettings\n\nclass AppSettings(BaseSettings):\n    # Database\n    database_url: str\n\n    # Redis\n    redis_url: str\n\n    # AWS\n    aws_access_key: str\n    aws_secret_key: str\n    s3_bucket: str\n\n    # JWT\n    jwt_secret: str\n    jwt_algorithm: str = \"HS256\"\n\n    class Config:\n        env_file = \".env\"\n\ndef get_settings() -&gt; AppSettings:\n    return AppSettings()\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#2-environment-specific-configuration","title":"2. Environment-Specific Configuration","text":"<pre><code>def configure_environment() -&gt; Container:\n    settings = get_settings()\n\n    if settings.environment == \"development\":\n        return configure_development(settings)\n    elif settings.environment == \"testing\":\n        return configure_testing(settings)\n    else:\n        return configure_production(settings)\n</code></pre>"},{"location":"dev-log/backend-planing/dependency_injection/#best-practices","title":"Best Practices","text":"<ol> <li>Single Responsibility</li> <li>Each service should have a single, well-defined responsibility</li> <li>Avoid service classes that do too much</li> <li> <p>Keep service interfaces focused</p> </li> <li> <p>Interface Segregation</p> </li> <li>Define clear interfaces for services</li> <li>Avoid large, monolithic service interfaces</li> <li> <p>Split services based on client needs</p> </li> <li> <p>Dependency Inversion</p> </li> <li>Depend on abstractions, not implementations</li> <li>Use interface protocols for service definitions</li> <li> <p>Configure concrete implementations at startup</p> </li> <li> <p>Lifecycle Management</p> </li> <li>Properly manage service lifetimes</li> <li>Clean up resources when services are disposed</li> <li> <p>Use appropriate scope for each service</p> </li> <li> <p>Testing Support</p> </li> <li>Easy service mocking</li> <li>Configurable test containers</li> <li>Isolated test environments</li> </ol> <p>These patterns ensure: - Loose coupling between components - Easy testing and mocking - Clear service boundaries - Maintainable codebase - Flexible configuration - Proper resource management</p>"},{"location":"dev-log/backend-planing/development-workflow/","title":"Development Workflow","text":""},{"location":"dev-log/backend-planing/development-workflow/#overview","title":"Overview","text":"<p>This document describes how to effectively use the provided tools and follow the project's architectural patterns in your daily development workflow.</p>"},{"location":"dev-log/backend-planing/development-workflow/#getting-started","title":"Getting Started","text":""},{"location":"dev-log/backend-planing/development-workflow/#1-environment-setup","title":"1. Environment Setup","text":"<pre><code># Install CLI tool\npip install craftsmanship\n\n# Install VSCode snippets\ncp .vscode/craftsmanship.code-snippets ~/.vscode/snippets/\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#2-configure-vscode","title":"2. Configure VSCode","text":"<ul> <li>Install recommended extensions</li> <li>Enable format on save</li> <li>Use project-specific settings</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#feature-development-workflow","title":"Feature Development Workflow","text":""},{"location":"dev-log/backend-planing/development-workflow/#1-creating-new-features","title":"1. Creating New Features","text":""},{"location":"dev-log/backend-planing/development-workflow/#a-domain-first-approach","title":"a. Domain-First Approach","text":"<pre><code># Create domain structure\ncraftsmanship domain create customer\n\n# Implement domain components using snippets\n- Use `entity` snippet for domain entity\n- Use `repo-interface` snippet for repository interface\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#b-infrastructure-layer","title":"b. Infrastructure Layer","text":"<pre><code># Generate repository implementation\ncraftsmanship repo create customer\n\n# Implement using snippets\n- Use `repo-impl` snippet for repository implementation\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#c-service-layer","title":"c. Service Layer","text":"<pre><code># Generate service structure\ncraftsmanship service create customer\n\n# Implement using snippets\n- Use `service` snippet for service class\n- Use `dto` snippet for DTOs\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#d-api-layer","title":"d. API Layer","text":"<pre><code># Generate API endpoints\ncraftsmanship api create customer\n\n# Implement using snippets\n- Use `router` snippet for FastAPI router\n- Use `schema` snippet for request/response models\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#2-testing","title":"2. Testing","text":""},{"location":"dev-log/backend-planing/development-workflow/#a-unit-tests","title":"a. Unit Tests","text":"<pre><code># Generate test structure\ncraftsmanship test create unit customer\n\n# Implement using snippets\n- Use `test-unit` snippet for test cases\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#b-integration-tests","title":"b. Integration Tests","text":"<pre><code># Generate test structure\ncraftsmanship test create integration customer\n\n# Implement using snippets\n- Use `test-integration` snippet for API tests\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#3-code-quality-checks","title":"3. Code Quality Checks","text":"<pre><code># Run all verifications\ncraftsmanship verify\n\n# Individual checks\ncraftsmanship verify lint\ncraftsmanship verify type\ncraftsmanship verify test\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"dev-log/backend-planing/development-workflow/#1-database-changes","title":"1. Database Changes","text":"<pre><code># Create new migration\ncraftsmanship db migration create add_customer_table\n\n# Apply migrations\ncraftsmanship db migrate\n\n# Rollback if needed\ncraftsmanship db rollback\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#2-adding-new-api-endpoints","title":"2. Adding New API Endpoints","text":"<pre><code># Generate route and schema files\ncraftsmanship api create endpoint-name\n\n# Implement endpoint\n1. Define request/response schemas using `schema` snippet\n2. Implement route handler using `router` snippet\n3. Add service method if needed\n4. Create integration test using `test-integration` snippet\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#3-adding-new-domain-features","title":"3. Adding New Domain Features","text":"<pre><code># Complete domain implementation\n1. Create domain using CLI\n2. Implement entity using snippets\n3. Define repository interface\n4. Create repository implementation\n5. Add service layer\n6. Create API endpoints\n7. Add tests\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#best-practices","title":"Best Practices","text":""},{"location":"dev-log/backend-planing/development-workflow/#1-code-organization","title":"1. Code Organization","text":"<ul> <li>One domain concept per directory</li> <li>Clear separation of layers</li> <li>Consistent file naming</li> <li>Follow interface segregation</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#2-implementation-guidelines","title":"2. Implementation Guidelines","text":"<ul> <li>Use type hints everywhere</li> <li>Document public APIs</li> <li>Keep functions focused</li> <li>Follow SOLID principles</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#3-testing-strategy","title":"3. Testing Strategy","text":"<ul> <li>Write tests first</li> <li>Cover edge cases</li> <li>Use meaningful test names</li> <li>Keep tests independent</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#4-version-control","title":"4. Version Control","text":"<ul> <li>Small, focused commits</li> <li>Clear commit messages</li> <li>Feature branches</li> <li>PR reviews</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev-log/backend-planing/development-workflow/#1-common-issues","title":"1. Common Issues","text":"<ul> <li>CLI tool errors</li> <li>Migration conflicts</li> <li>Test failures</li> <li>Type checking issues</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#2-solutions","title":"2. Solutions","text":"<ul> <li>Check logs</li> <li>Verify migrations</li> <li>Run specific tests</li> <li>Use debug mode</li> </ul>"},{"location":"dev-log/backend-planing/development-workflow/#quick-reference","title":"Quick Reference","text":""},{"location":"dev-log/backend-planing/development-workflow/#snippets","title":"Snippets","text":"<pre><code>entity         - Create domain entity\nrepo-interface - Create repository interface\nrepo-impl     - Create repository implementation\nservice        - Create service class\ndto           - Create DTO class\nrouter        - Create API router\nschema        - Create Pydantic schema\ntest-unit     - Create unit test\ntest-integration - Create integration test\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#cli-commands","title":"CLI Commands","text":"<pre><code>craftsmanship domain create   - Create domain\ncraftsmanship service create  - Create service\ncraftsmanship api create      - Create API endpoint\ncraftsmanship repo create     - Create repository\ncraftsmanship test create    - Create test file\ncraftsmanship verify         - Run verifications\ncraftsmanship db migration   - Manage migrations\n</code></pre>"},{"location":"dev-log/backend-planing/development-workflow/#support","title":"Support","text":"<ul> <li>Check documentation in <code>/docs</code></li> <li>Use issue tracker</li> <li>Contact team lead</li> <li>Review architecture docs</li> </ul> <p>Remember: The CLI tools and snippets are designed to help maintain consistency and reduce boilerplate. They should be used as part of your regular development workflow to ensure the codebase remains clean and maintainable.</p>"},{"location":"dev-log/backend-planing/domain_driven_design/","title":"Domain-Driven Design Implementation Guidelines","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#domain-structure","title":"Domain Structure","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-domain-organization","title":"1. Domain Organization","text":"<pre><code>app/\n\u251c\u2500\u2500 domains/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 value_objects/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 aggregates/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 events/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 repositories.py\n\u2502   \u2502   \u251c\u2500\u2500 application/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 use_cases/\n\u2502   \u2502   \u251c\u2500\u2500 infrastructure/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 repositories/\n\u2502   \u2502   \u2514\u2500\u2500 api/\n\u2502   \u2502       \u2514\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 [other domains]/\n\u251c\u2500\u2500 core/\n\u2514\u2500\u2500 shared/\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#domain-components","title":"Domain Components","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-entities","title":"1. Entities","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom uuid import UUID\n\n@dataclass\nclass User:\n    id: UUID\n    email: str\n    password_hash: str\n    created_at: datetime\n\n    @classmethod\n    def create(cls, email: str, password: str) -&gt; \"User\":\n        return cls(\n            id=uuid4(),\n            email=email,\n            password_hash=hash_password(password),\n            created_at=datetime.utcnow()\n        )\n\n    def update_password(self, new_password: str) -&gt; None:\n        self.password_hash = hash_password(new_password)\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#2-value-objects","title":"2. Value Objects","text":"<pre><code>@dataclass(frozen=True)\nclass Email:\n    value: str\n\n    def __post_init__(self):\n        if not self._is_valid_email(self.value):\n            raise ValueError(\"Invalid email format\")\n\n    @staticmethod\n    def _is_valid_email(email: str) -&gt; bool:\n        return '@' in email and '.' in email.split('@')[1]\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#3-aggregates","title":"3. Aggregates","text":"<pre><code>class UserAccount:\n    def __init__(self, user: User, profile: Profile):\n        self._user = user\n        self._profile = profile\n        self._preferences = UserPreferences()\n\n    @property\n    def user(self) -&gt; User:\n        return self._user\n\n    def update_profile(self, profile_data: ProfileUpdate) -&gt; None:\n        self._profile.update(profile_data)\n        self._raise_domain_event(ProfileUpdated(self._user.id))\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#4-domain-events","title":"4. Domain Events","text":"<pre><code>@dataclass(frozen=True)\nclass DomainEvent:\n    occurred_on: datetime = field(default_factory=datetime.utcnow)\n\n@dataclass(frozen=True)\nclass UserCreated(DomainEvent):\n    user_id: UUID\n    email: str\n\nclass DomainEventPublisher:\n    def publish(self, event: DomainEvent) -&gt; None:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#5-domain-services","title":"5. Domain Services","text":"<pre><code>class PasswordResetService:\n    def __init__(\n        self,\n        user_repository: UserRepository,\n        token_service: TokenService,\n        email_service: EmailService\n    ):\n        self._user_repository = user_repository\n        self._token_service = token_service\n        self._email_service = email_service\n\n    def initiate_reset(self, email: str) -&gt; None:\n        user = self._user_repository.get_by_email(email)\n        if user:\n            token = self._token_service.create_reset_token(user.id)\n            self._email_service.send_reset_email(email, token)\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#use-cases","title":"Use Cases","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-use-case-structure","title":"1. Use Case Structure","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Protocol\n\n@dataclass\nclass CreateUserInput:\n    email: str\n    password: str\n    name: str\n\n@dataclass\nclass CreateUserOutput:\n    user_id: UUID\n    email: str\n\nclass CreateUser(Protocol):\n    def execute(self, input_data: CreateUserInput) -&gt; CreateUserOutput:\n        ...\n\nclass CreateUserUseCase:\n    def __init__(\n        self,\n        user_repository: UserRepository,\n        event_publisher: DomainEventPublisher\n    ):\n        self._user_repository = user_repository\n        self._event_publisher = event_publisher\n\n    def execute(self, input_data: CreateUserInput) -&gt; CreateUserOutput:\n        user = User.create(\n            email=input_data.email,\n            password=input_data.password\n        )\n\n        saved_user = self._user_repository.save(user)\n\n        self._event_publisher.publish(\n            UserCreated(user_id=saved_user.id, email=saved_user.email)\n        )\n\n        return CreateUserOutput(\n            user_id=saved_user.id,\n            email=saved_user.email\n        )\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#domain-rules-and-invariants","title":"Domain Rules and Invariants","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-business-rules","title":"1. Business Rules","text":"<pre><code>class BusinessRule(Protocol):\n    def is_satisfied(self) -&gt; bool:\n        ...\n\n    def message(self) -&gt; str:\n        ...\n\nclass UserEmailMustBeUnique(BusinessRule):\n    def __init__(self, email: str, user_repository: UserRepository):\n        self._email = email\n        self._user_repository = user_repository\n\n    def is_satisfied(self) -&gt; bool:\n        return not self._user_repository.exists_by_email(self._email)\n\n    def message(self) -&gt; str:\n        return f\"Email {self._email} is already in use\"\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#2-domain-exceptions","title":"2. Domain Exceptions","text":"<pre><code>class DomainException(Exception):\n    pass\n\nclass BusinessRuleValidationException(DomainException):\n    def __init__(self, rule: BusinessRule):\n        super().__init__(rule.message())\n        self.rule = rule\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#domain-service-implementation","title":"Domain Service Implementation","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-application-services","title":"1. Application Services","text":"<pre><code>class ApplicationService:\n    def __init__(self, unit_of_work: UnitOfWork):\n        self._unit_of_work = unit_of_work\n\nclass UserApplicationService(ApplicationService):\n    def __init__(\n        self,\n        unit_of_work: UnitOfWork,\n        user_repository: UserRepository,\n        event_publisher: DomainEventPublisher\n    ):\n        super().__init__(unit_of_work)\n        self._user_repository = user_repository\n        self._event_publisher = event_publisher\n\n    def create_user(self, command: CreateUserCommand) -&gt; UUID:\n        with self._unit_of_work:\n            user = User.create(\n                email=command.email,\n                password=command.password\n            )\n\n            # Check business rules\n            self._check_rule(\n                UserEmailMustBeUnique(\n                    command.email,\n                    self._user_repository\n                )\n            )\n\n            saved_user = self._user_repository.save(user)\n            self._event_publisher.publish(\n                UserCreated(user_id=saved_user.id, email=saved_user.email)\n            )\n\n            return saved_user.id\n</code></pre>"},{"location":"dev-log/backend-planing/domain_driven_design/#best-practices","title":"Best Practices","text":""},{"location":"dev-log/backend-planing/domain_driven_design/#1-domain-isolation","title":"1. Domain Isolation","text":"<ul> <li>Keep domain logic pure and framework-independent</li> <li>Use value objects for validated attributes</li> <li>Encapsulate business rules within entities and aggregates</li> </ul>"},{"location":"dev-log/backend-planing/domain_driven_design/#2-rich-domain-model","title":"2. Rich Domain Model","text":"<ul> <li>Place business logic in domain objects</li> <li>Avoid anemic domain models</li> <li>Use domain services for operations spanning multiple aggregates</li> </ul>"},{"location":"dev-log/backend-planing/domain_driven_design/#3-bounded-contexts","title":"3. Bounded Contexts","text":"<ul> <li>Clear boundaries between different domains</li> <li>Explicit context mapping</li> <li>Use shared kernel for common concepts</li> </ul>"},{"location":"dev-log/backend-planing/domain_driven_design/#4-event-driven-design","title":"4. Event-Driven Design","text":"<ul> <li>Domain events for cross-aggregate communication</li> <li>Event sourcing for critical state changes</li> <li>Event-driven integration between bounded contexts</li> </ul>"},{"location":"dev-log/backend-planing/domain_driven_design/#5-business-rules","title":"5. Business Rules","text":"<ul> <li>Explicit business rule objects</li> <li>Centralized rule validation</li> <li>Clear error messages</li> </ul> <p>These guidelines ensure: - Clear business logic representation - Domain model integrity - Maintainable and testable code - Scalable architecture - Proper separation of concerns</p>"},{"location":"dev-log/backend-planing/implementation-plan/","title":"Backend Implementation Plan","text":""},{"location":"dev-log/backend-planing/implementation-plan/#foundation-setup","title":"Foundation Setup","text":""},{"location":"dev-log/backend-planing/implementation-plan/#project-structure","title":"Project Structure","text":"<ul> <li> Create <code>app/domain/</code> directory for domain models</li> <li> Create <code>app/infrastructure/</code> directory for implementations</li> <li> Create <code>app/service/</code> directory for business logic</li> <li> Create <code>app/api/v1/</code> directory for API routes</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li> Create <code>app/core/errors.py</code> for custom exception definitions</li> <li> Create <code>app/core/logging.py</code> for logging configuration</li> <li> Create <code>app/core/security.py</code> for authentication utilities</li> <li> Create <code>app/core/config.py</code> for environment configuration</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#base-classes","title":"Base Classes","text":"<ul> <li> Create <code>app/domain/base.py</code> for domain model interfaces</li> <li> Create <code>app/domain/mixins.py</code> for shared model behaviors</li> <li> Create <code>app/infrastructure/database.py</code> for database connection handling</li> <li> Create <code>app/infrastructure/base_repository.py</code> for repository base class</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#domain-layer-implementation","title":"Domain Layer Implementation","text":""},{"location":"dev-log/backend-planing/implementation-plan/#user-domain","title":"User Domain","text":"<ul> <li> Create <code>app/domain/user/entity.py</code> for user domain model</li> <li> Create <code>app/domain/user/repository.py</code> for user repository interface</li> <li> Create <code>app/domain/user/exceptions.py</code> for user-specific exceptions</li> <li> Create <code>app/domain/user/value_objects.py</code> for user-related value objects</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#tenant-domain","title":"Tenant Domain","text":"<ul> <li> Create <code>app/domain/tenant/entity.py</code> for tenant domain model</li> <li> Create <code>app/domain/tenant/repository.py</code> for tenant repository interface</li> <li> Create <code>app/domain/tenant/exceptions.py</code> for tenant-specific exceptions</li> <li> Create <code>app/domain/tenant/schema.py</code> for tenant database schema management</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#infrastructure-layer-implementation","title":"Infrastructure Layer Implementation","text":""},{"location":"dev-log/backend-planing/implementation-plan/#database-implementation","title":"Database Implementation","text":"<ul> <li> Create <code>app/infrastructure/repositories/user_repository.py</code> for user repository implementation</li> <li> Create <code>app/infrastructure/repositories/tenant_repository.py</code> for tenant repository implementation</li> <li> Create <code>app/infrastructure/unit_of_work.py</code> for transaction management</li> <li> Create <code>app/infrastructure/database_session.py</code> for session management</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#security-implementation","title":"Security Implementation","text":"<ul> <li> Create <code>app/infrastructure/auth/jwt.py</code> for JWT handling</li> <li> Create <code>app/infrastructure/auth/password.py</code> for password hashing</li> <li> Create <code>app/infrastructure/auth/permissions.py</code> for permission management</li> <li> Create <code>app/infrastructure/auth/role_resolver.py</code> for RBAC</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#service-layer-implementation","title":"Service Layer Implementation","text":""},{"location":"dev-log/backend-planing/implementation-plan/#application-services","title":"Application Services","text":"<ul> <li> Create <code>app/service/user/user_service.py</code> for user management logic</li> <li> Create <code>app/service/auth/auth_service.py</code> for authentication logic</li> <li> Create <code>app/service/tenant/tenant_service.py</code> for tenant management</li> <li> Create <code>app/service/email/email_service.py</code> for email notifications</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#dtos-and-mappers","title":"DTOs and Mappers","text":"<ul> <li> Create <code>app/service/dto/user_dto.py</code> for user data transfer objects</li> <li> Create <code>app/service/dto/auth_dto.py</code> for authentication DTOs</li> <li> Create <code>app/service/dto/tenant_dto.py</code> for tenant DTOs</li> <li> Create <code>app/service/mappers/entity_mappers.py</code> for entity-DTO mapping</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#api-layer-implementation","title":"API Layer Implementation","text":""},{"location":"dev-log/backend-planing/implementation-plan/#api-routes","title":"API Routes","text":"<ul> <li> Create <code>app/api/v1/auth.py</code> for authentication endpoints</li> <li> Create <code>app/api/v1/users.py</code> for user management endpoints</li> <li> Create <code>app/api/v1/tenants.py</code> for tenant management endpoints</li> <li> Create <code>app/api/v1/admin.py</code> for administrative endpoints</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#requestresponse-models","title":"Request/Response Models","text":"<ul> <li> Create <code>app/api/schemas/auth.py</code> for auth request/response models</li> <li> Create <code>app/api/schemas/user.py</code> for user request/response models</li> <li> Create <code>app/api/schemas/tenant.py</code> for tenant request/response models</li> <li> Create <code>app/api/schemas/error.py</code> for error response models</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#testing-infrastructure","title":"Testing Infrastructure","text":""},{"location":"dev-log/backend-planing/implementation-plan/#test-configuration","title":"Test Configuration","text":"<ul> <li> Create <code>tests/conftest.py</code> with shared test fixtures</li> <li> Create <code>tests/test_config.py</code> for test settings</li> <li> Create <code>tests/factories.py</code> for test data factories</li> <li> Create <code>tests/helpers.py</code> for test helper functions</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#unit-tests","title":"Unit Tests","text":"<ul> <li> Create <code>tests/unit/domain/test_user_entity.py</code> for user domain tests</li> <li> Create <code>tests/unit/service/test_user_service.py</code> for user service tests</li> <li> Create <code>tests/unit/infrastructure/test_user_repository.py</code> for repository tests</li> <li> Create <code>tests/unit/auth/test_security.py</code> for security utility tests</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#integration-tests","title":"Integration Tests","text":"<ul> <li> Create <code>tests/integration/api/test_auth_routes.py</code> for auth endpoint tests</li> <li> Create <code>tests/integration/api/test_user_routes.py</code> for user endpoint tests</li> <li> Create <code>tests/integration/api/test_tenant_routes.py</code> for tenant endpoint tests</li> <li> Create <code>tests/integration/infrastructure/test_database.py</code> for database tests</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#documentation","title":"Documentation","text":""},{"location":"dev-log/backend-planing/implementation-plan/#api-documentation","title":"API Documentation","text":"<ul> <li> Create <code>docs/api/auth.md</code> for authentication API documentation</li> <li> Create <code>docs/api/users.md</code> for user management API documentation</li> <li> Create <code>docs/api/tenants.md</code> for tenant management API documentation</li> <li> Create <code>docs/api/admin.md</code> for admin API documentation</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#technical-documentation","title":"Technical Documentation","text":"<ul> <li> Create <code>docs/architecture/domain_model.md</code> for domain model documentation</li> <li> Create <code>docs/architecture/database.md</code> for database schema documentation</li> <li> Create <code>docs/architecture/security.md</code> for security implementation docs</li> <li> Create <code>docs/architecture/api.md</code> for API design documentation</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#configuration-and-scripts","title":"Configuration and Scripts","text":""},{"location":"dev-log/backend-planing/implementation-plan/#database-migrations","title":"Database Migrations","text":"<ul> <li> Create <code>alembic/versions/initial_schema.py</code> for base database schema</li> <li> Create <code>alembic/versions/add_user_tables.py</code> for user-related tables</li> <li> Create <code>alembic/versions/add_tenant_tables.py</code> for tenant-related tables</li> <li> Create <code>alembic/versions/add_audit_tables.py</code> for audit logging tables</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#development-scripts","title":"Development Scripts","text":"<ul> <li> Create <code>scripts/setup_dev.py</code> for development environment setup</li> <li> Create <code>scripts/seed_data.py</code> for initial data seeding</li> <li> Create <code>scripts/test_data.py</code> for test data generation</li> <li> Create <code>scripts/generate_openapi.py</code> for OpenAPI spec generation</li> </ul>"},{"location":"dev-log/backend-planing/implementation-plan/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"dev-log/backend-planing/implementation-plan/#observability","title":"Observability","text":"<ul> <li> Create <code>app/infrastructure/monitoring/logger.py</code> for logging setup</li> <li> Create <code>app/infrastructure/monitoring/metrics.py</code> for metrics collection</li> <li> Create <code>app/infrastructure/monitoring/tracing.py</code> for request tracing</li> <li> Create <code>app/infrastructure/monitoring/health.py</code> for health checks</li> </ul>"},{"location":"dev-log/backend-planing/layer_boundaries/","title":"Layer Boundaries Definition","text":""},{"location":"dev-log/backend-planing/layer_boundaries/#layer-interaction-rules","title":"Layer Interaction Rules","text":""},{"location":"dev-log/backend-planing/layer_boundaries/#1-api-layer-presentation","title":"1. API Layer (Presentation)","text":"<p>Responsibilities: - Route definitions and endpoint handlers - Request/response DTOs (using Pydantic schemas) - Input validation and sanitization - Authentication middleware - Authorization checks - API documentation (OpenAPI/Swagger)</p> <p>Boundaries: - Can ONLY interact with Service Layer - Must NOT contain business logic - Must NOT directly access repositories or databases - Must handle HTTP-specific concerns only - Must use dependency injection for Service Layer access</p> <p>Example: <pre><code>@router.post(\"/users\")\ndef create_user(\n    user_data: UserCreate,\n    service: UserService = Depends(get_user_service)\n):\n    return service.create_user(user_data)\n</code></pre></p>"},{"location":"dev-log/backend-planing/layer_boundaries/#2-service-layer-application","title":"2. Service Layer (Application)","text":"<p>Responsibilities: - Business logic orchestration - Transaction management - Cross-domain coordination - Event handling/dispatching - Input/output port definitions - Use case implementations</p> <p>Boundaries: - Can interact with Domain Layer - Can coordinate multiple repositories - Must NOT have HTTP/presentation concerns - Must NOT directly access infrastructure - Must use repository interfaces, not implementations</p> <p>Example: <pre><code>class UserService:\n    def __init__(self, user_repo: UserRepository, event_publisher: EventPublisher):\n        self._user_repo = user_repo\n        self._event_publisher = event_publisher\n\n    def create_user(self, user_data: UserCreate) -&gt; User:\n        user = User.create(user_data)  # Domain entity\n        saved_user = self._user_repo.save(user)\n        self._event_publisher.publish(UserCreated(saved_user.id))\n        return saved_user\n</code></pre></p>"},{"location":"dev-log/backend-planing/layer_boundaries/#3-domain-layer-business","title":"3. Domain Layer (Business)","text":"<p>Responsibilities: - Business entities and value objects - Domain-specific business rules - Domain events - Repository interfaces - Domain service interfaces - Business invariants enforcement</p> <p>Boundaries: - Must be pure Python (no frameworks) - Must NOT have external dependencies - Must NOT know about persistence - Must NOT have infrastructure concerns - Must contain only business logic</p> <p>Example: <pre><code>class User:\n    def __init__(self, email: str, password: str):\n        self._validate_email(email)\n        self.email = email\n        self.password_hash = self._hash_password(password)\n\n    @staticmethod\n    def _validate_email(email: str) -&gt; None:\n        if not email or '@' not in email:\n            raise ValueError(\"Invalid email format\")\n</code></pre></p>"},{"location":"dev-log/backend-planing/layer_boundaries/#4-infrastructure-layer-data-external-services","title":"4. Infrastructure Layer (Data &amp; External Services)","text":"<p>Responsibilities: - Database implementations - External service integrations - Caching implementations - File storage operations - Repository implementations - Event publisher implementations - Email service implementations</p> <p>Boundaries: - Must implement interfaces defined in Domain Layer - Must NOT be directly accessed by API or Service layers - Must handle all external system interactions - Must manage infrastructure concerns</p> <p>Example: <pre><code>class PostgresUserRepository(UserRepository):\n    def __init__(self, db_session: Session):\n        self._session = db_session\n\n    def save(self, user: User) -&gt; User:\n        db_user = UserModel.from_domain(user)\n        self._session.add(db_user)\n        return db_user.to_domain()\n</code></pre></p>"},{"location":"dev-log/backend-planing/layer_boundaries/#cross-cutting-concerns","title":"Cross-Cutting Concerns","text":""},{"location":"dev-log/backend-planing/layer_boundaries/#1-dependency-injection","title":"1. Dependency Injection","text":"<ul> <li>All dependencies must be injected through constructors or FastAPI's dependency injection</li> <li>Implementation details should be resolved at composition root</li> <li>Each layer should depend on abstractions, not implementations</li> </ul>"},{"location":"dev-log/backend-planing/layer_boundaries/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Domain Layer: Raises domain-specific exceptions</li> <li>Service Layer: Translates domain exceptions to application exceptions</li> <li>API Layer: Converts application exceptions to HTTP responses</li> </ul>"},{"location":"dev-log/backend-planing/layer_boundaries/#3-validation","title":"3. Validation","text":"<ul> <li>API Layer: Request data validation (Pydantic)</li> <li>Domain Layer: Business rule validation</li> <li>Service Layer: Use case-specific validation</li> </ul>"},{"location":"dev-log/backend-planing/layer_boundaries/#4-transaction-management","title":"4. Transaction Management","text":"<ul> <li>Handled at Service Layer</li> <li>Unit of Work pattern implementation</li> <li>Consistent transaction boundaries</li> </ul>"},{"location":"dev-log/backend-planing/layer_boundaries/#communication-flow","title":"Communication Flow","text":"<pre><code>graph TD\n    A[API Layer] --&gt;|DTOs| B[Service Layer]\n    B --&gt;|Commands/Queries| C[Domain Layer]\n    C --&gt;|Interface Calls| D[Infrastructure Layer]\n    D --&gt;|Data/Results| C\n    C --&gt;|Domain Objects| B\n    B --&gt;|DTOs| A\n</code></pre>"},{"location":"dev-log/backend-planing/layer_boundaries/#layer-access-rules","title":"Layer Access Rules","text":"<ol> <li>Each layer can only depend on the layer directly below it</li> <li>Domain Layer has no dependencies on other layers</li> <li>Dependencies flow inward toward Domain Layer</li> <li>Outer layers must use interfaces to access inner layer functionality</li> <li>Cross-cutting concerns are accessed through dependency injection</li> </ol>"},{"location":"dev-log/backend-planing/layer_boundaries/#implementation-guidelines","title":"Implementation Guidelines","text":"<ol> <li>Clear Namespace Separation</li> <li>Each layer in its own module/package</li> <li>Clear import boundaries</li> <li> <p>No circular dependencies</p> </li> <li> <p>Interface Segregation</p> </li> <li>Small, focused interfaces</li> <li>Layer-specific interfaces</li> <li> <p>Clear contracts between layers</p> </li> <li> <p>Dependency Management</p> </li> <li>Explicit dependencies</li> <li>Constructor injection</li> <li> <p>Interface-based dependencies</p> </li> <li> <p>Testing Considerations</p> </li> <li>Each layer testable in isolation</li> <li>Mocking at layer boundaries</li> <li>Integration tests across layers</li> </ol> <p>These boundaries ensure: - Clear separation of concerns - Maintainable and testable code - Scalable architecture - Domain-driven design principles - Flexible and modular system</p>"},{"location":"dev-log/backend-planing/repository_patterns/","title":"Repository Pattern Implementation Guidelines","text":""},{"location":"dev-log/backend-planing/repository_patterns/#design-principles","title":"Design Principles","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-domain-specific-repositories","title":"1. Domain-Specific Repositories","text":"<p>Each domain should have its own repositories that handle data access specific to that domain's context. For example:</p> <pre><code># Domain: Users\nclass UserRepository(Protocol):\n    def get_by_email(self, email: str) -&gt; Optional[User]:\n        ...\n    def save(self, user: User) -&gt; User:\n        ...\n\n# Domain: Auth\nclass TokenRepository(Protocol):\n    def save_refresh_token(self, token: RefreshToken) -&gt; None:\n        ...\n    def validate_token(self, token_value: str) -&gt; bool:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-repository-interface-location","title":"2. Repository Interface Location","text":"<p>Repository interfaces should be defined in the domain layer, while implementations reside in the infrastructure layer:</p> <pre><code>domains/\n\u251c\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u2514\u2500\u2500 repositories.py  # Interfaces\n\u2502   \u2514\u2500\u2500 infrastructure/\n\u2502       \u2514\u2500\u2500 postgres_repository.py  # Implementations\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#implementation-patterns","title":"Implementation Patterns","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-base-repository-pattern","title":"1. Base Repository Pattern","text":"<pre><code>from typing import TypeVar, Generic, Protocol\n\nT = TypeVar('T')\n\nclass Repository(Protocol, Generic[T]):\n    def get(self, id: Any) -&gt; Optional[T]:\n        ...\n    def save(self, entity: T) -&gt; T:\n        ...\n    def delete(self, id: Any) -&gt; None:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-domain-specific-repository-methods","title":"2. Domain-Specific Repository Methods","text":"<pre><code>class UserRepository(Repository[User]):\n    def get_by_email(self, email: str) -&gt; Optional[User]:\n        ...\n    def get_by_username(self, username: str) -&gt; Optional[User]:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#tenant-aware-repositories","title":"Tenant-Aware Repositories","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-base-tenant-aware-repository","title":"1. Base Tenant-Aware Repository","text":"<pre><code>class TenantAwareRepository(Repository[T]):\n    def __init__(self, tenant_id: str):\n        self.tenant_id = tenant_id\n\n    def get_for_tenant(self, id: Any) -&gt; Optional[T]:\n        ...\n    def save_for_tenant(self, entity: T) -&gt; T:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-implementation-example","title":"2. Implementation Example","text":"<pre><code>class PostgresUserRepository(TenantAwareRepository[User]):\n    def __init__(self, session: Session, tenant_id: str):\n        super().__init__(tenant_id)\n        self._session = session\n\n    def get_for_tenant(self, id: Any) -&gt; Optional[User]:\n        return self._session.query(UserModel)\\\n            .filter(UserModel.tenant_id == self.tenant_id)\\\n            .filter(UserModel.id == id)\\\n            .first()\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#query-specifications","title":"Query Specifications","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-specification-pattern","title":"1. Specification Pattern","text":"<pre><code>class Specification(Protocol[T]):\n    def is_satisfied_by(self, entity: T) -&gt; bool:\n        ...\n\nclass QuerySpecification(Protocol[T]):\n    def to_query(self) -&gt; Any:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-implementation-example_1","title":"2. Implementation Example","text":"<pre><code>class ActiveUsersSpecification(QuerySpecification[User]):\n    def to_query(self):\n        return User.is_active == True\n\nclass UserRepository(Repository[User]):\n    def find_by_specification(self, spec: QuerySpecification[User]) -&gt; List[User]:\n        return self._session.query(User).filter(spec.to_query()).all()\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#repository-factory-pattern","title":"Repository Factory Pattern","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-factory-interface","title":"1. Factory Interface","text":"<pre><code>class RepositoryFactory(Protocol):\n    def create_user_repository(self) -&gt; UserRepository:\n        ...\n    def create_token_repository(self) -&gt; TokenRepository:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-implementation","title":"2. Implementation","text":"<pre><code>class PostgresRepositoryFactory(RepositoryFactory):\n    def __init__(self, session_factory: SessionFactory):\n        self._session_factory = session_factory\n\n    def create_user_repository(self) -&gt; UserRepository:\n        return PostgresUserRepository(self._session_factory())\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#transaction-management","title":"Transaction Management","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-unit-of-work-pattern","title":"1. Unit of Work Pattern","text":"<pre><code>class UnitOfWork(Protocol):\n    def begin(self) -&gt; None:\n        ...\n    def commit(self) -&gt; None:\n        ...\n    def rollback(self) -&gt; None:\n        ...\n    def __enter__(self) -&gt; 'UnitOfWork':\n        ...\n    def __exit__(self, exc_type, exc_val, exc_tb) -&gt; None:\n        ...\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-implementation_1","title":"2. Implementation","text":"<pre><code>class SqlAlchemyUnitOfWork(UnitOfWork):\n    def __init__(self, session_factory: SessionFactory):\n        self.session_factory = session_factory\n\n    def __enter__(self):\n        self.session = self.session_factory()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            self.rollback()\n        else:\n            self.commit()\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#integration-guidelines","title":"Integration Guidelines","text":""},{"location":"dev-log/backend-planing/repository_patterns/#1-service-layer-usage","title":"1. Service Layer Usage","text":"<pre><code>class UserService:\n    def __init__(\n        self,\n        user_repository: UserRepository,\n        unit_of_work: UnitOfWork\n    ):\n        self._user_repository = user_repository\n        self._unit_of_work = unit_of_work\n\n    def create_user(self, user_data: UserCreate) -&gt; User:\n        with self._unit_of_work:\n            user = User.create(user_data)\n            return self._user_repository.save(user)\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#2-api-layer-integration","title":"2. API Layer Integration","text":"<pre><code>@router.post(\"/users\")\ndef create_user(\n    user_data: UserCreate,\n    user_service: UserService = Depends(get_user_service)\n):\n    return user_service.create_user(user_data)\n</code></pre>"},{"location":"dev-log/backend-planing/repository_patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Repository Independence</li> <li>Repositories should be independent of each other</li> <li>Avoid repository-to-repository calls</li> <li> <p>Use service layer for cross-repository operations</p> </li> <li> <p>Query Optimization</p> </li> <li>Implement lazy loading where appropriate</li> <li>Use query specifications for complex queries</li> <li> <p>Consider implementing query objects for complex scenarios</p> </li> <li> <p>Error Handling</p> </li> <li>Define repository-specific exceptions</li> <li>Translate database errors to domain exceptions</li> <li> <p>Handle connection errors gracefully</p> </li> <li> <p>Testing</p> </li> <li>Create mock repositories for testing</li> <li>Test repository implementations in isolation</li> <li>Use in-memory databases for integration tests</li> </ol> <p>These patterns ensure: - Clean separation of concerns - Testable data access layer - Flexible and maintainable code - Support for multi-tenant architecture - Consistent data access patterns across the application</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/","title":"CLI Tool and VSCode Snippets Plan","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#cli-tool-design","title":"CLI Tool Design","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#command-structure","title":"Command Structure","text":"<pre><code>craftsmanship [command] [options]\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#core-commands","title":"Core Commands","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#1-domain-generation","title":"1. Domain Generation","text":"<p><pre><code>craftsmanship domain create [domain-name]\n</code></pre> Creates a new domain with all required files: - domain/[name]/entity.py - domain/[name]/repository.py - domain/[name]/exceptions.py - domain/[name]/value_objects.py - domain/[name]/schemas.py</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#2-service-generation","title":"2. Service Generation","text":"<p><pre><code>craftsmanship service create [service-name]\n</code></pre> Creates a new service with required files: - service/[name]/service.py - service/[name]/dto.py - service/[name]/mapper.py</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#3-api-route-generation","title":"3. API Route Generation","text":"<p><pre><code>craftsmanship api create [route-name]\n</code></pre> Creates new API endpoint files: - api/v1/[name].py - api/schemas/[name].py - tests/api/test_[name].py</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#4-repository-generation","title":"4. Repository Generation","text":"<p><pre><code>craftsmanship repo create [repo-name]\n</code></pre> Creates repository implementation: - infrastructure/repositories/[name]repository.py - tests/infrastructure/repositories/test[name]_repository.py</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#5-test-generation","title":"5. Test Generation","text":"<p><pre><code>craftsmanship test create [type] [name]\n</code></pre> Creates test files based on type: - Unit test: tests/unit/[path]/test_[name].py - Integration test: tests/integration/[path]/test_[name].py</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#helper-commands","title":"Helper Commands","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#1-project-scaffolding","title":"1. Project Scaffolding","text":"<p><pre><code>craftsmanship project init [project-name]\n</code></pre> Initializes new project with basic structure</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#2-migration-management","title":"2. Migration Management","text":"<pre><code>craftsmanship db migration create [name]\ncraftsmanship db migrate\ncraftsmanship db rollback\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#3-code-verification","title":"3. Code Verification","text":"<p><pre><code>craftsmanship verify\n</code></pre> Runs: - Type checking - Linting - Tests - Format checking</p>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#vscode-snippets","title":"VSCode Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#1-domain-layer-snippets","title":"1. Domain Layer Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#domain-entity","title":"Domain Entity","text":"<pre><code>{\n  \"Domain Entity\": {\n    \"prefix\": \"entity\",\n    \"body\": [\n      \"from dataclasses import dataclass\",\n      \"from domain.base import Entity\",\n      \"\",\n      \"@dataclass\",\n      \"class ${1:Name}Entity(Entity):\",\n      \"    id: int\",\n      \"    ${2:attribute}: ${3:type}\",\n      \"\",\n      \"    def validate(self) -&gt; None:\",\n      \"        ${4:pass}\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#repository-interface","title":"Repository Interface","text":"<pre><code>{\n  \"Repository Interface\": {\n    \"prefix\": \"repo-interface\",\n    \"body\": [\n      \"from typing import Protocol, Optional\",\n      \"from domain.${1:name}.entity import ${2:Name}Entity\",\n      \"\",\n      \"class ${2:Name}Repository(Protocol):\",\n      \"    def get(self, id: int) -&gt; Optional[${2:Name}Entity]:\",\n      \"        ...\",\n      \"\",\n      \"    def create(self, entity: ${2:Name}Entity) -&gt; ${2:Name}Entity:\",\n      \"        ...\",\n      \"\",\n      \"    def update(self, entity: ${2:Name}Entity) -&gt; ${2:Name}Entity:\",\n      \"        ...\",\n      \"\",\n      \"    def delete(self, id: int) -&gt; None:\",\n      \"        ...\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#2-service-layer-snippets","title":"2. Service Layer Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#service-class","title":"Service Class","text":"<pre><code>{\n  \"Service Class\": {\n    \"prefix\": \"service\",\n    \"body\": [\n      \"from domain.${1:name}.repository import ${2:Name}Repository\",\n      \"from service.${1:name}.dto import ${2:Name}DTO\",\n      \"\",\n      \"class ${2:Name}Service:\",\n      \"    def __init__(self, repository: ${2:Name}Repository):\",\n      \"        self.repository = repository\",\n      \"\",\n      \"    async def get(self, id: int) -&gt; ${2:Name}DTO:\",\n      \"        entity = await self.repository.get(id)\",\n      \"        return ${2:Name}DTO.from_entity(entity)\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#dto-class","title":"DTO Class","text":"<pre><code>{\n  \"DTO Class\": {\n    \"prefix\": \"dto\",\n    \"body\": [\n      \"from dataclasses import dataclass\",\n      \"from domain.${1:name}.entity import ${2:Name}Entity\",\n      \"\",\n      \"@dataclass\",\n      \"class ${2:Name}DTO:\",\n      \"    ${3:attribute}: ${4:type}\",\n      \"\",\n      \"    @classmethod\",\n      \"    def from_entity(cls, entity: ${2:Name}Entity) -&gt; '${2:Name}DTO':\",\n      \"        return cls(\",\n      \"            ${3:attribute}=entity.${3:attribute},\",\n      \"        )\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#3-infrastructure-layer-snippets","title":"3. Infrastructure Layer Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#repository-implementation","title":"Repository Implementation","text":"<pre><code>{\n  \"Repository Implementation\": {\n    \"prefix\": \"repo-impl\",\n    \"body\": [\n      \"from typing import Optional\",\n      \"from sqlalchemy.orm import Session\",\n      \"from domain.${1:name}.entity import ${2:Name}Entity\",\n      \"from domain.${1:name}.repository import ${2:Name}Repository\",\n      \"\",\n      \"class SQL${2:Name}Repository(${2:Name}Repository):\",\n      \"    def __init__(self, session: Session):\",\n      \"        self.session = session\",\n      \"\",\n      \"    def get(self, id: int) -&gt; Optional[${2:Name}Entity]:\",\n      \"        ${0}\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#4-api-layer-snippets","title":"4. API Layer Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#router","title":"Router","text":"<pre><code>{\n  \"FastAPI Router\": {\n    \"prefix\": \"router\",\n    \"body\": [\n      \"from fastapi import APIRouter, Depends, HTTPException\",\n      \"from app.api.deps import get_current_user\",\n      \"from service.${1:name}.service import ${2:Name}Service\",\n      \"from app.api.schemas.${1:name} import ${2:Name}Create, ${2:Name}Response\",\n      \"\",\n      \"router = APIRouter(prefix='/${1:name}s', tags=['${2:Name}s'])\",\n      \"\",\n      \"@router.post('/', response_model=${2:Name}Response)\",\n      \"async def create_${1:name}(\",\n      \"    data: ${2:Name}Create,\",\n      \"    service: ${2:Name}Service = Depends(),\",\n      \"    current_user = Depends(get_current_user)\",\n      \"):\",\n      \"    return await service.create(data, current_user)\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#schema","title":"Schema","text":"<pre><code>{\n  \"Pydantic Schema\": {\n    \"prefix\": \"schema\",\n    \"body\": [\n      \"from pydantic import BaseModel\",\n      \"\",\n      \"class ${1:Name}Base(BaseModel):\",\n      \"    ${2:attribute}: ${3:type}\",\n      \"\",\n      \"class ${1:Name}Create(${1:Name}Base):\",\n      \"    pass\",\n      \"\",\n      \"class ${1:Name}Response(${1:Name}Base):\",\n      \"    id: int\",\n      \"\",\n      \"    class Config:\",\n      \"        orm_mode = True\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#5-test-snippets","title":"5. Test Snippets","text":""},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#unit-test","title":"Unit Test","text":"<pre><code>{\n  \"Unit Test\": {\n    \"prefix\": \"test-unit\",\n    \"body\": [\n      \"import pytest\",\n      \"from unittest.mock import Mock\",\n      \"\",\n      \"def test_${1:function_name}():\",\n      \"    # Arrange\",\n      \"    ${2:arrange}\",\n      \"\",\n      \"    # Act\",\n      \"    ${3:act}\",\n      \"\",\n      \"    # Assert\",\n      \"    ${4:assert}\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#integration-test","title":"Integration Test","text":"<pre><code>{\n  \"Integration Test\": {\n    \"prefix\": \"test-integration\",\n    \"body\": [\n      \"import pytest\",\n      \"from httpx import AsyncClient\",\n      \"\",\n      \"async def test_${1:endpoint_name}(\",\n      \"    client: AsyncClient,\",\n      \"    ${2:fixtures}\",\n      \"):\",\n      \"    # Arrange\",\n      \"    ${3:arrange}\",\n      \"\",\n      \"    # Act\",\n      \"    response = await client.${4:method}('${5:endpoint}')\",\n      \"\",\n      \"    # Assert\",\n      \"    assert response.status_code == ${6:200}\",\n      \"    ${7:additional_assertions}\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#installation-and-setup","title":"Installation and Setup","text":"<ol> <li> <p>Install CLI tool: <pre><code>pip install craftsmanship\n</code></pre></p> </li> <li> <p>Install VSCode snippets:</p> </li> <li>Copy snippets to <code>.vscode/craftsmanship.code-snippets</code></li> <li>Or use VSCode extension marketplace</li> </ol>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#usage-guidelines","title":"Usage Guidelines","text":"<ol> <li> <p>Always use CLI for generating new components: <pre><code># Creating a new domain\ncraftsmanship domain create user\n\n# Creating a service\ncraftsmanship service create user\n\n# Creating API endpoints\ncraftsmanship api create user\n</code></pre></p> </li> <li> <p>Use snippets for implementation:</p> </li> <li><code>entity</code> - Create domain entities</li> <li><code>repo-interface</code> - Create repository interfaces</li> <li><code>service</code> - Create service classes</li> <li><code>dto</code> - Create DTOs</li> <li><code>router</code> - Create API routes</li> <li><code>schema</code> - Create Pydantic schemas</li> <li><code>test-unit</code> - Create unit tests</li> <li> <p><code>test-integration</code> - Create integration tests</p> </li> <li> <p>Follow the verification process: ```bash</p> </li> </ol>"},{"location":"dev-log/cli-fast-craftsmanship/cli-and-snippets-plan/#before-committing","title":"Before committing","text":"<p>craftsmanship verify</p>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the architecture of Fast Craftsmanship, explaining how the components fit together and the design decisions behind them.</p>"},{"location":"development/architecture/#overview","title":"Overview","text":"<p>Fast Craftsmanship follows a modular, functional architecture with a clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    CLI Layer    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Command Layer  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Domain Layer   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Utility Layer  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#layers","title":"Layers","text":""},{"location":"development/architecture/#cli-layer","title":"CLI Layer","text":"<p>The CLI layer handles user interaction through the command line interface. It:</p> <ul> <li>Parses command-line arguments</li> <li>Dispatches to the appropriate commands</li> <li>Formats output for display</li> <li>Handles command-line flags and options</li> </ul> <p>Key files: - <code>fcship/cli.py</code>: Main entry point and command registration - <code>fcship/tui/</code>: Text UI components for display and interaction</p>"},{"location":"development/architecture/#command-layer","title":"Command Layer","text":"<p>The Command layer contains the implementation of all commands. Each command:</p> <ul> <li>Takes validated input from the CLI layer</li> <li>Implements the business logic for the command</li> <li>Returns a Result that may contain data or errors</li> <li>Is responsible for a specific domain of functionality</li> </ul> <p>Key files: - <code>fcship/commands/*.py</code>: Individual command modules - <code>fcship/commands/__init__.py</code>: Command registration and organization</p>"},{"location":"development/architecture/#domain-layer","title":"Domain Layer","text":"<p>The domain layer contains the core business logic and models. It:</p> <ul> <li>Defines data structures and validation rules</li> <li>Implements domain-specific operations</li> <li>Is independent of the command and CLI layers</li> <li>Uses Railway Oriented Programming for error handling</li> </ul> <p>Key files: - Domain models in various command modules - Validation logic and business rules</p>"},{"location":"development/architecture/#utility-layer","title":"Utility Layer","text":"<p>The utility layer provides common functions and tools used across the application:</p> <ul> <li>Error handling utilities</li> <li>File system operations</li> <li>Functional programming helpers</li> <li>Type utilities</li> </ul> <p>Key files: - <code>fcship/utils/error_handling.py</code>: Error utilities - <code>fcship/utils/file_utils.py</code>: File system operations - <code>fcship/utils/functional.py</code>: Functional programming utilities - <code>fcship/utils/type_utils.py</code>: Type handling utilities</p>"},{"location":"development/architecture/#key-design-principles","title":"Key Design Principles","text":""},{"location":"development/architecture/#functional-programming","title":"Functional Programming","text":"<p>Fast Craftsmanship is built on functional programming principles:</p> <ul> <li>Pure Functions: Functions have no side effects and return the same output for the same input</li> <li>Immutable Data: Data structures are immutable, using Pydantic models</li> <li>Railway Oriented Programming: Error handling using Result types</li> <li>Function Composition: Building complex operations by composing simple functions</li> </ul>"},{"location":"development/architecture/#railway-oriented-programming-rop","title":"Railway Oriented Programming (ROP)","text":"<p>ROP is a core pattern in Fast Craftsmanship:</p> <ul> <li>Functions return <code>Result[T, E]</code> types representing success or failure</li> <li>Errors propagate through pipelines of functions</li> <li>Effect functions (<code>@effect.result</code>) for sequential operations</li> <li>Explicit error handling without exceptions</li> </ul>"},{"location":"development/architecture/#command-pattern","title":"Command Pattern","text":"<p>Commands follow a consistent pattern:</p> <ol> <li>Parse and validate input</li> <li>Execute the command logic</li> <li>Return a Result with the output or errors</li> <li>Format and display the result</li> </ol>"},{"location":"development/architecture/#dependency-injection","title":"Dependency Injection","text":"<p>The architecture uses a form of dependency injection:</p> <ul> <li>Functions receive their dependencies as parameters</li> <li>Higher-order functions compose behavior</li> <li>No global state or singletons</li> <li>Easy to test with mocks and stubs</li> </ul>"},{"location":"development/architecture/#file-organization","title":"File Organization","text":"<p>The project follows this file organization:</p> <pre><code>fcship/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 cli.py               # Main CLI entry point\n\u251c\u2500\u2500 commands/            # Command implementations\n\u2502   \u251c\u2500\u2500 __init__.py      # Command registration\n\u2502   \u251c\u2500\u2500 github/          # GitHub commands\n\u2502   \u251c\u2500\u2500 project/         # Project commands\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 templates/           # Templates for code generation\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tui/                 # Text UI components\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 utils/               # Utility functions\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<p>Fast Craftsmanship uses a structured approach to error handling:</p> <ol> <li>Functions return <code>Result[T, E]</code> types</li> <li>Error types are well-defined and descriptive</li> <li>Errors propagate through function pipelines</li> <li>TUI layer formats errors for display</li> </ol>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":"<p>The testing strategy follows these principles:</p> <ol> <li>Unit Tests: Test individual functions in isolation</li> <li>Integration Tests: Test command execution end-to-end</li> <li>Mocks and Stubs: Use mocks for external dependencies</li> <li>Property Testing: Use property-based testing for invariants</li> <li>Coverage: Maintain high test coverage</li> </ol>"},{"location":"development/architecture/#future-improvements","title":"Future Improvements","text":"<p>Areas for future architectural improvements:</p> <ol> <li>Plugin System: Allow for custom commands and extensions</li> <li>Event System: Implement an event system for loose coupling</li> <li>Caching: Add caching for expensive operations</li> <li>Parallelism: Add support for parallel execution of tasks</li> <li>Config Management: Enhance configuration management</li> </ol>"},{"location":"development/contributing/","title":"Contributing to Fast Craftsmanship","text":"<p>Thank you for your interest in contributing to Fast Craftsmanship! This guide will help you set up your development environment and understand our contribution workflow.</p>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>Git</li> <li>uv (recommended for dependency management)</li> </ul>"},{"location":"development/contributing/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/Fguedes90/fast-craftsmanship.git\ncd fast-craftsmanship\n</code></pre>"},{"location":"development/contributing/#install-development-dependencies","title":"Install Development Dependencies","text":"<pre><code>uv pip install -e \".[dev]\"\n</code></pre> <p>This installs the package in development mode with all required development dependencies.</p>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>Fast Craftsmanship follows these code style principles:</p> <ol> <li>Railway Oriented Programming (ROP) using the Expression library</li> <li>Pydantic models for data validation</li> <li>Functional programming paradigms</li> </ol> <p>Key guidelines:</p> <ul> <li>Use <code>Result</code> types for error handling (avoid try/except)</li> <li>Prefer composable functions over classes where possible</li> <li>Use immutable data structures</li> <li>Make all functions type-annotated</li> <li>Use generator-based functions with <code>yield from</code> for sequencing operations</li> </ul>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest tests/\n\n# Run specific tests\npytest tests/commands/test_github.py\n\n# Run tests with coverage\npytest --cov=fcship tests/\n</code></pre>"},{"location":"development/contributing/#linting","title":"Linting","text":"<p>We use Ruff for linting and formatting:</p> <pre><code># Check code style\nruff check fcship/\n\n# Format code\nruff format fcship/\n</code></pre>"},{"location":"development/contributing/#git-workflow","title":"Git Workflow","text":""},{"location":"development/contributing/#branch-naming","title":"Branch Naming","text":"<ul> <li><code>feat-*</code>: New features</li> <li><code>fix-*</code>: Bug fixes</li> <li><code>refactor-*</code>: Code refactoring</li> <li><code>docs-*</code>: Documentation changes</li> <li><code>test-*</code>: Adding or modifying tests</li> </ul>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>We follow the conventional commits specification:</p> <pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding or modifying tests - <code>chore</code>: Maintenance tasks</p> <p>Example: <pre><code>feat: add new GitHub workflow commands\n\nAdds new commands for listing, viewing, and watching GitHub workflow runs.\nThe commands use the GitHub API via pygithub to retrieve workflow information.\n\nCloses #42\n</code></pre></p>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Create a new branch from <code>main</code> for your changes</li> <li>Make your changes following our code style guidelines</li> <li>Write tests for new functionality</li> <li>Make sure all tests pass</li> <li>Submit a pull request to the <code>main</code> branch</li> <li>Wait for review and address any feedback</li> </ol>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs with the Material theme for documentation. Documentation files are in the <code>docs/</code> directory.</p>"},{"location":"development/contributing/#running-documentation-locally","title":"Running Documentation Locally","text":"<pre><code># Install documentation dependencies\nuv pip install mkdocs mkdocs-material mkdocstrings-python\n\n# Serve documentation locally\nmkdocs serve\n</code></pre>"},{"location":"development/contributing/#adding-documentation","title":"Adding Documentation","text":"<ul> <li>Add code docstrings following Google style</li> <li>Update markdown files in the <code>docs/</code> directory</li> <li>Add new pages to the navigation in <code>mkdocs.yml</code></li> </ul>"},{"location":"development/contributing/#creating-new-commands","title":"Creating New Commands","text":"<ol> <li>Create a new file in the appropriate directory under <code>fcship/commands/</code></li> <li>Use the Result type for error handling</li> <li>Add command registration in the appropriate <code>__init__.py</code> file</li> <li>Add tests in the <code>tests/commands/</code> directory</li> <li>Add documentation in the <code>docs/commands/</code> directory</li> </ol>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<p>Fast Craftsmanship uses automated releases via GitHub Actions:</p> <ol> <li>Commits to <code>main</code> run CI checks</li> <li>Version tags (v*) trigger the release workflow</li> <li>The release workflow builds and publishes to PyPI</li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<p>If you need help with contributing, feel free to:</p> <ul> <li>Open an issue on GitHub</li> <li>Ask questions in pull requests</li> <li>Reach out to the maintainers</li> </ul> <p>We appreciate your contributions and look forward to your ideas!</p>"},{"location":"docs/cli/","title":"Fast-Craftsmanship CLI","text":"<p>Fast-craftsmanship is a comprehensive CLI tool that helps you maintain a clean and consistent project structure following domain-driven design principles and FastAPI best practices.</p>"},{"location":"docs/cli/#command-categories","title":"Command Categories","text":"<p>The CLI is organized into the following categories:</p>"},{"location":"docs/cli/#project-scaffolding-structure","title":"Project Scaffolding &amp; Structure","text":"<p>Commands for creating and managing your project structure and components:</p> <ul> <li><code>project</code> - Initialize and manage project structure</li> <li><code>domain</code> - Create and manage domain components</li> <li><code>service</code> - Create and manage service layer components</li> <li><code>api</code> - Generate API endpoints and schemas</li> <li><code>repo</code> - Create and manage repository implementations</li> </ul> <p>\ufffd Learn more about Scaffolding commands</p>"},{"location":"docs/cli/#version-control-collaboration","title":"Version Control &amp; Collaboration","text":"<p>Commands for managing version control:</p> <ul> <li><code>commit</code> - Tool to create conventional commit messages</li> </ul> <p>\ufffd Learn more about VCS commands</p>"},{"location":"docs/cli/#github-integration","title":"GitHub Integration","text":"<p>Commands for interacting with GitHub:</p> <ul> <li>GitHub repository setup and management</li> <li>GitHub Actions workflows</li> <li>Pull requests and issues</li> </ul> <p>\ufffd Learn more about GitHub commands</p>"},{"location":"docs/cli/#quality-assurance-testing","title":"Quality Assurance &amp; Testing","text":"<p>Commands for ensuring code quality:</p> <ul> <li><code>test</code> - Create test files and run tests</li> <li><code>verify</code> - Run code quality checks</li> </ul> <p>\ufffd Learn more about Quality commands</p>"},{"location":"docs/cli/#database-management","title":"Database Management","text":"<p>Commands for managing databases:</p> <ul> <li><code>db</code> - Manage database migrations</li> </ul> <p>\ufffd Learn more about Database commands</p>"},{"location":"docs/cli/#documentation-management","title":"Documentation Management","text":"<p>Commands for generating and managing documentation:</p> <ul> <li>Documentation tools</li> </ul> <p>\ufffd Learn more about Documentation commands</p>"},{"location":"docs/cli/#web-scraping","title":"Web Scraping","text":"<p>Commands for web scraping:</p> <ul> <li>Markdown scraping tools</li> </ul> <p>\ufffd Learn more about Scraping commands</p>"},{"location":"docs/cli/#getting-started","title":"Getting Started","text":"<p>To get started with the Fast-craftsmanship CLI, run:</p> <pre><code># Show available commands\ncraftsmanship --help\n\n# View command categories\ncraftsmanship --categories\n\n# View specific category commands\ncraftsmanship scaffold --help\n\n# Launch interactive Terminal UI\ncraftsmanship menu\n# or\ncraftsmanship --tui\n</code></pre>"},{"location":"docs/cli/#interactive-terminal-ui","title":"Interactive Terminal UI","text":"<p>Fast-craftsmanship includes an interactive Terminal UI that makes it easy to browse and run commands without remembering all the options. You can launch it with:</p> <pre><code>craftsmanship menu\n</code></pre> <p>The TUI provides:</p> <ul> <li>Category-based navigation</li> <li>Command descriptions</li> <li>Help text for each command</li> <li>One-click execution of commands</li> </ul>"},{"location":"docs/cli/#common-usage-patterns","title":"Common Usage Patterns","text":"<pre><code># Initialize a new project\ncraftsmanship project init\n\n# Create domain components\ncraftsmanship domain entity user\n\n# Generate API routes\ncraftsmanship api create users\n\n# Run code quality checks\ncraftsmanship verify\n</code></pre> <p>For detailed documentation on each command, refer to the specific category pages.</p>"},{"location":"docs/cli/commands/","title":"CLI Commands","text":"<p>Fast Craftsmanship CLI provides a set of commands designed to help you maintain high-quality code and follow best practices in your development workflow.</p>"},{"location":"docs/cli/commands/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/#verification-commands","title":"Verification Commands","text":"<ul> <li>verify: Run code quality checks including type checking, linting, testing, and formatting</li> <li>Type checking with mypy</li> <li>Linting with flake8</li> <li>Testing with pytest</li> <li>Format checking with black</li> </ul>"},{"location":"docs/cli/commands/#architecture-commands","title":"Architecture Commands","text":"<ul> <li>api: Generate and manage API endpoints</li> <li>domain: Work with domain models and business logic</li> <li>service: Manage service layer components</li> <li>repo: Handle data access and repository patterns</li> </ul>"},{"location":"docs/cli/commands/#project-commands","title":"Project Commands","text":"<ul> <li>project: Initialize and manage project structure</li> <li>docs: Generate and maintain documentation</li> <li>test: Create and run tests</li> </ul>"},{"location":"docs/cli/commands/#command-design-principles","title":"Command Design Principles","text":"<p>All commands in Fast Craftsmanship follow these core principles:</p> <ol> <li>Functional Programming</li> <li>Pure functions with explicit error types</li> <li>Railway-oriented programming using Result types</li> <li> <p>Immutable data structures</p> </li> <li> <p>Type Safety</p> </li> <li>Static type checking with mypy</li> <li>Tagged unions for error handling</li> <li> <p>Generic types for flexible, type-safe operations</p> </li> <li> <p>User Experience</p> </li> <li>Clear, consistent error messages</li> <li>Rich terminal output</li> <li> <p>Progress indicators for long-running operations</p> </li> <li> <p>Error Handling</p> </li> <li>Structured error types</li> <li>Graceful error recovery</li> <li>Detailed error reporting</li> </ol>"},{"location":"docs/cli/commands/#common-features","title":"Common Features","text":"<p>Every command shares these common features:</p> <ul> <li>Result-based error handling: All operations return <code>Result[T, Error]</code></li> <li>Rich UI: Consistent terminal output using the UI utilities</li> <li>Validation: Input validation and error checking</li> <li>Documentation: Detailed help and usage information</li> </ul>"},{"location":"docs/cli/commands/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/cli/commands/#running-verifications","title":"Running Verifications","text":"<pre><code># Run all verifications\nfcship verify\n\n# Run specific verification\nfcship verify type\n</code></pre>"},{"location":"docs/cli/commands/#working-with-projects","title":"Working with Projects","text":"<pre><code># Initialize a new project\nfcship project init\n\n# Generate documentation\nfcship docs generate\n</code></pre>"},{"location":"docs/cli/commands/#see-also","title":"See Also","text":"<ul> <li>UI Utilities: Documentation for the UI components used by commands</li> <li>Error Handling: Guide to error handling patterns</li> <li>Type System: Information about type safety and validation</li> </ul>"},{"location":"docs/cli/commands/db/","title":"Database Management Commands","text":"<p>The database commands help you manage database migrations, schemas, and data.</p>"},{"location":"docs/cli/commands/db/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/db/#db","title":"<code>db</code>","text":"<p>Manage database migrations and schemas.</p> <pre><code># Create a new migration\ncraftsmanship db migration create add_users_table\n\n# Run migrations\ncraftsmanship db migrate\n\n# Rollback migration\ncraftsmanship db rollback\n\n# Generate database schema\ncraftsmanship db schema generate\n</code></pre>"},{"location":"docs/cli/commands/db/#database-operations","title":"Database Operations","text":"<p>The <code>db</code> command supports various database operations:</p> Operation Description <code>migration</code> Create and manage database migrations <code>migrate</code> Apply pending migrations <code>rollback</code> Rollback previously applied migrations <code>schema</code> Generate and validate database schemas <code>seed</code> Seed the database with test or initial data <code>reset</code> Reset the database (drop and recreate)"},{"location":"docs/cli/commands/db/#migration-management","title":"Migration Management","text":"<p>Managing database migrations:</p> <pre><code># Create a new migration\ncraftsmanship db migration create add_user_fields\n\n# List all migrations\ncraftsmanship db migration list\n\n# Check migration status\ncraftsmanship db migration status\n</code></pre>"},{"location":"docs/cli/commands/db/#database-schemas","title":"Database Schemas","text":"<p>Working with database schemas:</p> <pre><code># Generate schema from models\ncraftsmanship db schema generate\n\n# Export schema to SQL\ncraftsmanship db schema export --format sql\n\n# Visualize schema as diagram\ncraftsmanship db schema visualize\n</code></pre>"},{"location":"docs/cli/commands/db/#database-seeding","title":"Database Seeding","text":"<p>Seeding the database with data:</p> <pre><code># Seed database with default data\ncraftsmanship db seed\n\n# Seed with specific data set\ncraftsmanship db seed --dataset test_users\n</code></pre>"},{"location":"docs/cli/commands/db/#usage-examples","title":"Usage Examples","text":"<pre><code># Complete database setup\ncraftsmanship db migration create initial_schema\ncraftsmanship db migrate\ncraftsmanship db seed\n\n# Check database status\ncraftsmanship db migration status\n</code></pre>"},{"location":"docs/cli/commands/docs/","title":"Documentation Management Commands","text":"<p>The documentation commands help you generate, manage, and publish project documentation.</p>"},{"location":"docs/cli/commands/docs/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/docs/#documentation-generation","title":"Documentation Generation","text":"<pre><code># Generate documentation from code\ncraftsmanship docs generate\n\n# Generate API documentation\ncraftsmanship docs api\n\n# Generate documentation site\ncraftsmanship docs site build\n</code></pre>"},{"location":"docs/cli/commands/docs/#documentation-types","title":"Documentation Types","text":"<p>The <code>docs</code> command supports various documentation types:</p> Type Description <code>api</code> API documentation from OpenAPI specs <code>code</code> Code documentation from docstrings <code>guides</code> User guides and tutorials <code>concepts</code> Domain concepts and architecture <code>site</code> Complete documentation site"},{"location":"docs/cli/commands/docs/#documentation-formats","title":"Documentation Formats","text":"<p>Documentation can be generated in multiple formats:</p> <pre><code># Generate HTML documentation\ncraftsmanship docs generate --format html\n\n# Generate Markdown documentation\ncraftsmanship docs generate --format markdown\n\n# Generate PDF documentation\ncraftsmanship docs generate --format pdf\n</code></pre>"},{"location":"docs/cli/commands/docs/#documentation-publishing","title":"Documentation Publishing","text":"<p>Publishing documentation:</p> <pre><code># Publish documentation to GitHub Pages\ncraftsmanship docs publish --target github-pages\n\n# Publish documentation to ReadTheDocs\ncraftsmanship docs publish --target readthedocs\n</code></pre>"},{"location":"docs/cli/commands/docs/#template-management","title":"Template Management","text":"<p>Working with documentation templates:</p> <pre><code># List available templates\ncraftsmanship docs templates list\n\n# Create a custom template\ncraftsmanship docs templates create my-template\n\n# Use a specific template\ncraftsmanship docs generate --template my-template\n</code></pre>"},{"location":"docs/cli/commands/docs/#usage-examples","title":"Usage Examples","text":"<pre><code># Complete documentation workflow\ncraftsmanship docs generate\ncraftsmanship docs site build\ncraftsmanship docs publish\n\n# Generate specific documentation\ncraftsmanship docs api --title \"Project API\" --version \"1.0.0\"\n</code></pre>"},{"location":"docs/cli/commands/github/","title":"GitHub Integration Commands","text":"<p>The GitHub commands help you interact with GitHub repositories, actions, issues, and pull requests directly from the command line.</p>"},{"location":"docs/cli/commands/github/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/github/#repository-management","title":"Repository Management","text":"<pre><code># Initialize a new GitHub repository\ncraftsmanship github init\n\n# Clone a GitHub repository\ncraftsmanship github clone username/repo\n\n# Fork a GitHub repository\ncraftsmanship github fork username/repo\n</code></pre>"},{"location":"docs/cli/commands/github/#github-actions","title":"GitHub Actions","text":"<pre><code># List GitHub Actions workflows\ncraftsmanship github actions list\n\n# View recent workflow runs\ncraftsmanship github actions runs\n\n# Create a new GitHub Actions workflow\ncraftsmanship github actions create python-ci\n</code></pre>"},{"location":"docs/cli/commands/github/#pull-requests","title":"Pull Requests","text":"<pre><code># Create a new pull request\ncraftsmanship github pr create\n\n# List open pull requests\ncraftsmanship github pr list\n\n# Checkout a pull request locally\ncraftsmanship github pr checkout 123\n</code></pre>"},{"location":"docs/cli/commands/github/#issues","title":"Issues","text":"<pre><code># Create a new issue\ncraftsmanship github issue create\n\n# List open issues\ncraftsmanship github issue list\n\n# Close an issue\ncraftsmanship github issue close 456\n</code></pre>"},{"location":"docs/cli/commands/github/#authentication","title":"Authentication","text":"<p>GitHub commands require authentication. You can authenticate using:</p> <pre><code># Set up GitHub authentication\ncraftsmanship github login\n</code></pre> <p>This will store your GitHub token securely for future use.</p>"},{"location":"docs/cli/commands/github/#cicd-templates","title":"CI/CD Templates","text":"<p>The GitHub commands provide templates for common CI/CD configurations:</p> <pre><code># Add Python CI/CD workflow\ncraftsmanship github actions add python-ci\n\n# Add Docker build workflow\ncraftsmanship github actions add docker-build\n\n# Add custom workflow\ncraftsmanship github actions add custom --template my-template.yml\n</code></pre>"},{"location":"docs/cli/commands/github/#usage-examples","title":"Usage Examples","text":"<pre><code># Set up a complete GitHub repository with CI/CD\ncraftsmanship github init\ncraftsmanship github actions add python-ci\n\n# Create a pull request for current branch\ncraftsmanship github pr create --title \"Add user authentication\" --body \"Implements #123\"\n</code></pre>"},{"location":"docs/cli/commands/quality/","title":"Quality Assurance &amp; Testing Commands","text":"<p>The quality commands help you ensure code quality through testing, linting, type checking, and other verification steps.</p>"},{"location":"docs/cli/commands/quality/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/quality/#test","title":"<code>test</code>","text":"<p>Create and run tests.</p> <pre><code># Run all tests\ncraftsmanship test run\n\n# Create a test file\ncraftsmanship test create users_service\n\n# Run specific tests\ncraftsmanship test run --pattern \"*user*\"\n</code></pre>"},{"location":"docs/cli/commands/quality/#verify","title":"<code>verify</code>","text":"<p>Run code quality checks.</p> <pre><code># Run all verifications\ncraftsmanship verify\n\n# Run only linting\ncraftsmanship verify --lint\n\n# Run only type checking\ncraftsmanship verify --types\n</code></pre>"},{"location":"docs/cli/commands/quality/#code-quality-checks","title":"Code Quality Checks","text":"<p>The <code>verify</code> command includes the following checks:</p> Check Description Lint Code style and best practices using Ruff Type checking Static type checking with mypy Tests Run tests and check code coverage Security Check for security vulnerabilities Formatting Verify code formatting"},{"location":"docs/cli/commands/quality/#test-patterns","title":"Test Patterns","text":"<p>The <code>test</code> command supports various patterns for creating tests:</p> <pre><code># Create a unit test\ncraftsmanship test create --type unit user_service\n\n# Create an integration test\ncraftsmanship test create --type integration auth_flow\n\n# Create a test with specific assertions\ncraftsmanship test create user_service --assertions equality validation\n</code></pre>"},{"location":"docs/cli/commands/quality/#continuous-integration","title":"Continuous Integration","text":"<p>These commands are designed to work well in CI environments:</p> <pre><code># Run in CI mode (with appropriate output format)\ncraftsmanship verify --ci\n\n# Run tests with JUnit report\ncraftsmanship test run --report junit\n</code></pre>"},{"location":"docs/cli/commands/quality/#usage-examples","title":"Usage Examples","text":"<pre><code># Complete quality check before commit\ncraftsmanship verify\n\n# Create and run a specific test\ncraftsmanship test create user_service\ncraftsmanship test run --pattern \"*user_service*\"\n</code></pre>"},{"location":"docs/cli/commands/scaffold/","title":"Project Scaffolding &amp; Structure Commands","text":"<p>The scaffolding commands help you create and manage your project structure and components following domain-driven design principles and FastAPI best practices.</p>"},{"location":"docs/cli/commands/scaffold/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/scaffold/#project","title":"<code>project</code>","text":"<p>Initialize and manage project structure.</p> <pre><code># Initialize a new project\ncraftsmanship project init\n\n# Add a new module to the project\ncraftsmanship project add-module users\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#domain","title":"<code>domain</code>","text":"<p>Create and manage domain components like entities, value objects, and domain services.</p> <pre><code># Create a domain entity\ncraftsmanship domain entity user\n\n# Create a value object\ncraftsmanship domain value-object email\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#service","title":"<code>service</code>","text":"<p>Create and manage service layer components.</p> <pre><code># Create a service\ncraftsmanship service create user-service\n\n# Generate service methods\ncraftsmanship service add-method user-service create-user\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#api","title":"<code>api</code>","text":"<p>Generate API endpoints and schemas.</p> <pre><code># Create API routes\ncraftsmanship api create users\n\n# Generate API schemas\ncraftsmanship api schema user\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#repo","title":"<code>repo</code>","text":"<p>Create and manage repository implementations.</p> <pre><code># Create a repository\ncraftsmanship repo create user-repository\n\n# Add repository methods\ncraftsmanship repo add-method user-repository find-by-email\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#usage-patterns","title":"Usage Patterns","text":""},{"location":"docs/cli/commands/scaffold/#creating-a-complete-feature","title":"Creating a Complete Feature","text":"<p>To create a complete feature with all necessary components:</p> <pre><code># Create domain components\ncraftsmanship domain entity user\ncraftsmanship domain value-object email\n\n# Create repository layer\ncraftsmanship repo create user-repository\n\n# Create service layer\ncraftsmanship service create user-service\n\n# Create API endpoints\ncraftsmanship api create users\n</code></pre>"},{"location":"docs/cli/commands/scaffold/#command-options","title":"Command Options","text":"<p>Each command supports various options. Use the <code>--help</code> flag to see all available options:</p> <pre><code>craftsmanship project --help\ncraftsmanship domain entity --help\n</code></pre>"},{"location":"docs/cli/commands/scraper/","title":"Web Scraping Commands","text":"<p>The web scraping commands help you extract content from websites, particularly focusing on Markdown content.</p>"},{"location":"docs/cli/commands/scraper/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/scraper/#markdown-scraping","title":"Markdown Scraping","text":"<pre><code># Scrape Markdown content from a URL\ncraftsmanship scrape url https://example.com/docs\n\n# Scrape entire documentation site\ncraftsmanship scrape site https://example.com/docs\n\n# Save scraped content to local files\ncraftsmanship scrape url https://example.com/docs --output ./local-docs\n</code></pre>"},{"location":"docs/cli/commands/scraper/#scraping-options","title":"Scraping Options","text":"<p>The scrape commands support various options for controlling the scraping process:</p> Option Description <code>--depth</code> Maximum recursion depth for following links <code>--rate-limit</code> Rate limiting to avoid overwhelming sites <code>--concurrency</code> Number of concurrent requests <code>--format</code> Output format (markdown, html, text) <code>--selector</code> CSS selector for targeting specific content <code>--timeout</code> Request timeout value"},{"location":"docs/cli/commands/scraper/#content-processing","title":"Content Processing","text":"<p>Processing scraped content:</p> <pre><code># Extract specific sections\ncraftsmanship scrape url https://example.com/docs --selector \".main-content\"\n\n# Process content into specific format\ncraftsmanship scrape url https://example.com/docs --process format\n\n# Extract and organize content\ncraftsmanship scrape site https://example.com/docs --organize by-section\n</code></pre>"},{"location":"docs/cli/commands/scraper/#authentication-support","title":"Authentication Support","text":"<p>Scraping content that requires authentication:</p> <pre><code># Scrape with basic authentication\ncraftsmanship scrape url https://example.com/docs --auth basic --username user --password pass\n\n# Use cookie-based authentication\ncraftsmanship scrape url https://example.com/docs --auth cookie --cookie-file ./cookies.json\n</code></pre>"},{"location":"docs/cli/commands/scraper/#monitoring-and-reporting","title":"Monitoring and Reporting","text":"<p>Monitoring scraping progress:</p> <pre><code># Scrape with detailed progress reporting\ncraftsmanship scrape site https://example.com/docs --verbose\n\n# Generate scraping report\ncraftsmanship scrape site https://example.com/docs --report ./scrape-report.json\n</code></pre>"},{"location":"docs/cli/commands/scraper/#usage-examples","title":"Usage Examples","text":"<pre><code># Scrape documentation with depth limit\ncraftsmanship scrape site https://example.com/docs --depth 3 --output ./docs\n\n# Extract specific content with rate limiting\ncraftsmanship scrape url https://example.com/api-docs --selector \".endpoint\" --rate-limit 1\n</code></pre>"},{"location":"docs/cli/commands/vcs/","title":"Version Control &amp; Collaboration Commands","text":"<p>The VCS commands help you manage version control with consistent commit messages following conventional commits format.</p>"},{"location":"docs/cli/commands/vcs/#available-commands","title":"Available Commands","text":""},{"location":"docs/cli/commands/vcs/#commit","title":"<code>commit</code>","text":"<p>Generate and create conventional commit messages.</p> <pre><code># Create a conventional commit\ncraftsmanship commit\n\n# Create a commit with a specific type\ncraftsmanship commit --type feat\n\n# Create a commit with a scope\ncraftsmanship commit --type fix --scope auth\n</code></pre>"},{"location":"docs/cli/commands/vcs/#conventional-commit-types","title":"Conventional Commit Types","text":"<p>Supported commit types:</p> Type Description <code>feat</code> A new feature <code>fix</code> A bug fix <code>docs</code> Documentation only changes <code>style</code> Changes that do not affect meaning (formatting) <code>refactor</code> Code change that neither fixes a bug nor adds feature <code>perf</code> Code change that improves performance <code>test</code> Adding missing tests or correcting existing tests <code>build</code> Changes to build system or external dependencies <code>ci</code> Changes to CI configuration files and scripts <code>chore</code> Other changes that don't modify src or test files"},{"location":"docs/cli/commands/vcs/#integration-with-git","title":"Integration with Git","text":"<p>The <code>commit</code> command integrates seamlessly with Git:</p> <ol> <li>Automatically stages modified files</li> <li>Creates a well-formatted commit message</li> <li>Executes the commit</li> </ol>"},{"location":"docs/cli/commands/vcs/#usage-examples","title":"Usage Examples","text":"<pre><code># Interactive commit generation\ncraftsmanship commit\n\n# Quick commit with type and message\ncraftsmanship commit --type feat --message \"Add user authentication\"\n\n# Commit with breaking change\ncraftsmanship commit --type feat --breaking --message \"Complete API redesign\"\n</code></pre>"},{"location":"docs/cli/commands/verify/","title":"CLI Commands","text":""},{"location":"docs/cli/commands/verify/#verify-command","title":"Verify Command","text":"<p>The verify command provides functionality to run various code quality checks on your codebase. It uses functional programming principles with railway-oriented programming to handle failures gracefully and provide clear error messages.</p>"},{"location":"docs/cli/commands/verify/#usage","title":"Usage","text":"<pre><code>fcship verify [check_type]\n</code></pre>"},{"location":"docs/cli/commands/verify/#arguments","title":"Arguments","text":"<ul> <li><code>check_type</code> (optional): Type of verification to run. Defaults to \"all\".</li> <li>Valid values: \"all\", \"type\", \"lint\", \"test\", \"format\"</li> </ul>"},{"location":"docs/cli/commands/verify/#verification-types","title":"Verification Types","text":"<p>The following verifications are available:</p> <ul> <li>Type Check: Verifies type annotations using <code>mypy</code></li> <li>Lint: Runs code linting using <code>flake8</code></li> <li>Test: Executes test suite using <code>pytest</code></li> <li>Format: Checks code formatting using <code>black</code></li> </ul>"},{"location":"docs/cli/commands/verify/#implementation-details","title":"Implementation Details","text":"<p>The verify command is implemented using functional programming principles:</p> <ul> <li>Railway-oriented programming with <code>Result</code> types for error handling</li> <li>Pure functions with explicit error types</li> <li>Immutable data structures using <code>Block</code> and <code>Map</code></li> <li>Tagged unions for type-safe error handling</li> </ul>"},{"location":"docs/cli/commands/verify/#key-types","title":"Key Types","text":"<pre><code>class CommandOutput:\n    stdout: str      # Standard output\n    stderr: str      # Standard error\n    returncode: int  # Return code\n\nclass VerificationOutcome:\n    tag: Literal[\"success\", \"failure\", \"validation_error\", \"execution_error\"]\n    success: str | None\n    failure: tuple[str, str] | None\n    validation_error: str | None\n    execution_error: tuple[str, str] | None\n</code></pre>"},{"location":"docs/cli/commands/verify/#workflow","title":"Workflow","text":"<ol> <li>Validates the check type</li> <li>Determines which verifications to run</li> <li>Executes each verification independently</li> <li>Collects and processes results</li> <li>Displays summary table and detailed failures</li> <li>Returns overall success/failure</li> </ol>"},{"location":"docs/cli/commands/verify/#example-output","title":"Example Output","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Verification Results        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Type Check    \u2502 \u2728 Passed      \u2502\n\u2502 Lint          \u2502 \u2728 Passed      \u2502\n\u2502 Test          \u2502 \u2728 Passed      \u2502\n\u2502 Format        \u2502 \u2728 Passed      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2728 All verifications passed successfully!\n</code></pre> <p>Or with failures:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Verification Results        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Type Check    \u2502 \u274c Failed      \u2502\n\u2502 Lint          \u2502 \u2728 Passed      \u2502\n\u2502 Test          \u2502 \u2728 Passed      \u2502\n\u2502 Format        \u2502 \u2728 Passed      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nType Check Failed\nmypy found type errors:\nmain.py:10: error: Incompatible return value type\n</code></pre>"},{"location":"docs/cli/commands/verify/#error-handling","title":"Error Handling","text":"<p>The command uses a sophisticated error handling system with distinct error types:</p> <ul> <li>ValidationError: Input validation failures</li> <li>ExecutionError: Command execution failures</li> <li>Failure: Verification check failures</li> <li>DisplayError: UI rendering failures</li> </ul> <p>Each error type is handled appropriately with clear error messages and proper error propagation.</p>"},{"location":"docs/cli/commands/verify/#customization","title":"Customization","text":"<p>The verifications are configured using a <code>Map</code> of commands:</p> <pre><code>VERIFICATIONS = Map.of_seq([\n    (\"type\", Block.of_seq([\"mypy\", \".\"])),\n    (\"lint\", Block.of_seq([\"flake8\"])),\n    (\"test\", Block.of_seq([\"pytest\"])),\n    (\"format\", Block.of_seq([\"black\", \"--check\", \".\"]))\n])\n</code></pre> <p>To add or modify verifications, update this configuration map with the desired commands.</p>"},{"location":"docs/cli/utils/","title":"CLI Utilities","text":"<p>The Fast Craftsmanship CLI utilities provide a foundation for building robust, type-safe, and functional command-line applications. These utilities are designed with functional programming principles and focus on error handling, user experience, and maintainability.</p>"},{"location":"docs/cli/utils/#available-utilities","title":"Available Utilities","text":""},{"location":"docs/cli/utils/#user-interface","title":"User Interface","text":"<ul> <li>UI Utilities: Rich terminal output, interactive prompts, and display components</li> <li>Display functions (messages, panels, tables)</li> <li>Error handling and recovery</li> <li>Progress tracking</li> <li>Input validation</li> <li>Context management</li> </ul>"},{"location":"docs/cli/utils/#error-handling","title":"Error Handling","text":"<ul> <li>Error Handling: Functional approach to error management</li> <li>Railway-oriented programming</li> <li>Tagged union error types</li> <li>Error recovery strategies</li> <li>Command error decorators</li> </ul>"},{"location":"docs/cli/utils/#type-system","title":"Type System","text":"<ul> <li>Type Utils: Type safety and validation utilities</li> <li>Generic type constraints</li> <li>Runtime type checking</li> <li>Type validation functions</li> <li>Type-safe conversions</li> </ul>"},{"location":"docs/cli/utils/#file-operations","title":"File Operations","text":"<ul> <li>File Utils: File system operations</li> <li>Path validation</li> <li>Safe file operations</li> <li>File type checking</li> <li>Directory management</li> </ul>"},{"location":"docs/cli/utils/#validation","title":"Validation","text":"<ul> <li>Validation: Input validation utilities</li> <li>Data validators</li> <li>Schema validation</li> <li>Format checking</li> <li>Custom validation rules</li> </ul>"},{"location":"docs/cli/utils/#design-philosophy","title":"Design Philosophy","text":"<p>The utilities follow these core principles:</p> <ol> <li>Functional Programming</li> <li>Pure functions</li> <li>Immutable data structures</li> <li>Explicit error handling</li> <li> <p>Composition over inheritance</p> </li> <li> <p>Type Safety</p> </li> <li>Static type checking</li> <li>Runtime type validation</li> <li>Generic type constraints</li> <li> <p>Type-safe error handling</p> </li> <li> <p>User Experience</p> </li> <li>Consistent UI patterns</li> <li>Clear error messages</li> <li>Interactive feedback</li> <li> <p>Progressive disclosure</p> </li> <li> <p>Maintainability</p> </li> <li>Modular design</li> <li>Clear documentation</li> <li>Comprehensive testing</li> <li>Consistent patterns</li> </ol>"},{"location":"docs/cli/utils/#getting-started","title":"Getting Started","text":""},{"location":"docs/cli/utils/#basic-usage","title":"Basic Usage","text":"<pre><code>from fcship.utils.ui import display_message, success_message\nfrom fcship.utils.error_handling import handle_command_errors\nfrom expression import Result, Ok, Error\n\n@handle_command_errors\ndef my_command() -&gt; None:\n    result = display_message(\"Starting operation...\", \"cyan\")\n    if result.is_ok():\n        success_message(\"Operation completed!\")\n</code></pre>"},{"location":"docs/cli/utils/#error-handling_1","title":"Error Handling","text":"<pre><code>from fcship.utils.ui import DisplayError, handle_ui_error\nfrom expression import Result\n\ndef safe_operation() -&gt; Result[None, DisplayError]:\n    # Your operation here\n    return Ok(None)\n\nresult = safe_operation()\nif result.is_error():\n    handle_ui_error(result.error)\n</code></pre>"},{"location":"docs/cli/utils/#integration-examples","title":"Integration Examples","text":""},{"location":"docs/cli/utils/#combining-multiple-utilities","title":"Combining Multiple Utilities","text":"<pre><code>from fcship.utils import ui, error_handling, validation\nfrom expression import Result, pipe\n\ndef validated_command(input_data: str) -&gt; Result[None, DisplayError]:\n    return (\n        validation.validate_input(input_data)\n        .bind(process_data)\n        .bind(ui.display_result)\n    )\n</code></pre>"},{"location":"docs/cli/utils/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling</li> <li>Always use Result types for operations that can fail</li> <li>Handle all error cases explicitly</li> <li>Provide meaningful error messages</li> <li> <p>Use appropriate error types</p> </li> <li> <p>Type Safety</p> </li> <li>Use type hints consistently</li> <li>Validate input types at runtime</li> <li>Use generic types for flexible components</li> <li> <p>Maintain type safety across boundaries</p> </li> <li> <p>User Interface</p> </li> <li>Follow consistent display patterns</li> <li>Provide clear feedback</li> <li>Handle long operations with progress indicators</li> <li> <p>Use appropriate UI components</p> </li> <li> <p>Testing</p> </li> <li>Write unit tests for all utilities</li> <li>Test error cases explicitly</li> <li>Mock external dependencies</li> <li>Test type constraints</li> </ol>"},{"location":"docs/cli/utils/#contributing","title":"Contributing","text":"<p>When adding new utilities:</p> <ol> <li>Follow functional programming principles</li> <li>Maintain type safety</li> <li>Add comprehensive documentation</li> <li>Include unit tests</li> <li>Follow existing patterns</li> </ol>"},{"location":"docs/cli/utils/#see-also","title":"See Also","text":"<ul> <li>Command Documentation</li> <li>Functional Programming Guide</li> <li>Architecture Guidelines</li> </ul>"},{"location":"docs/cli/utils/type_utils/","title":"Type System","text":"<p>This document describes the type system utilities used in Fast Craftsmanship CLI.</p>"},{"location":"docs/cli/utils/type_utils/#type-safety","title":"Type Safety","text":"<p>Fast Craftsmanship emphasizes type safety through:</p> <ul> <li>Static type annotations with mypy</li> <li>Runtime type validation</li> <li>Custom type definitions for domain concepts</li> </ul>"},{"location":"docs/cli/utils/type_utils/#type-utilities","title":"Type Utilities","text":"<p>The CLI provides several utilities for working with types:</p>"},{"location":"docs/cli/utils/type_utils/#type-validation","title":"Type Validation","text":"<pre><code>from fcship.utils.type_utils import validate_type\n\n# Validate at runtime\nvalue = validate_type(\"test\", str)  # Returns \"test\"\nvalidate_type(123, str)  # Raises TypeError\n</code></pre>"},{"location":"docs/cli/utils/type_utils/#custom-types","title":"Custom Types","text":"<pre><code>from typing import NewType, List\nfrom fcship.utils.type_utils import validate_type\n\n# Define domain-specific types\nUserId = NewType('UserId', str)\nProjectName = NewType('ProjectName', str)\n\n# Use with validation\nproject_name = validate_type(\"my-project\", ProjectName)\n</code></pre>"},{"location":"docs/cli/utils/type_utils/#type-conversions","title":"Type Conversions","text":"<pre><code>from fcship.utils.type_utils import safe_cast\n\n# Safely convert between types\nint_value = safe_cast(\"123\", int)  # Returns 123\nint_value = safe_cast(\"not a number\", int)  # Returns None\nint_value = safe_cast(\"not a number\", int, default=0)  # Returns 0\n</code></pre>"},{"location":"docs/cli/utils/type_utils/#generic-programming","title":"Generic Programming","text":"<p>Fast Craftsmanship uses generics for more flexible and reusable code:</p> <pre><code>from typing import TypeVar, Generic, List\n\nT = TypeVar('T')\n\nclass Repository(Generic[T]):\n    def __init__(self, items: List[T]):\n        self.items = items\n\n    def get(self, index: int) -&gt; T:\n        return self.items[index]\n</code></pre>"},{"location":"docs/cli/utils/type_utils/#type-guards","title":"Type Guards","text":"<p>Type guards are used to narrow types in a type-safe way:</p> <pre><code>from typing import Union, TypeGuard\nfrom fcship.utils.type_utils import is_string\n\ndef is_string(value: object) -&gt; TypeGuard[str]:\n    return isinstance(value, str)\n\ndef process_value(value: Union[str, int]) -&gt; None:\n    if is_string(value):\n        # value is now known to be a string\n        print(value.upper())\n    else:\n        # value is now known to be an int\n        print(value + 1)\n</code></pre>"},{"location":"docs/cli/utils/ui/","title":"UI Utilities","text":"<p>The UI utilities module provides a comprehensive set of tools for building consistent, type-safe, and functional command-line interfaces using Rich and Expression.</p>"},{"location":"docs/cli/utils/ui/#core-concepts","title":"Core Concepts","text":""},{"location":"docs/cli/utils/ui/#type-aliases","title":"Type Aliases","text":"<pre><code># Basic UI Results\nDisplayResult: TypeAlias = Result[None, DisplayError]\n\"\"\"Result type for display operations that don't return a value.\"\"\"\n\nTableResult: TypeAlias = Result[Table, DisplayError]\n\"\"\"Result type for operations that return a Rich Table.\"\"\"\n\nPanelResult: TypeAlias = Result[Panel, DisplayError]\n\"\"\"Result type for operations that return a Rich Panel.\"\"\"\n\nValidationResult: TypeAlias = Result[str, DisplayError]\n\"\"\"Result type for string validation operations.\"\"\"\n\n# Data Structures\nTableRow: TypeAlias = tuple[str, str]\n\"\"\"Type for representing a table row with two columns.\"\"\"\n\nTableData: TypeAlias = list[TableRow]\n\"\"\"Type for representing table data as a list of rows.\"\"\"\n\n# Function Types\nStyleValidator: TypeAlias = Callable[[str], ValidationResult]\n\"\"\"Type for style validation functions.\"\"\"\n\nDisplayFunction[T]: TypeAlias = Callable[[T], DisplayResult]\n\"\"\"Type for display functions that return DisplayResult.\"\"\"\n\nRecoveryStrategy[T]: TypeAlias = dict[str, Callable[[], Result[T, DisplayError]]]\n\"\"\"Type for mapping error types to recovery functions.\"\"\"\n\nProgressProcessor[T, U]: TypeAlias = Callable[[T], Result[U, str]]\n\"\"\"Type for processing items in a progress operation.\"\"\"\n</code></pre>"},{"location":"docs/cli/utils/ui/#displayerror","title":"DisplayError","text":"<p>A tagged union type representing all possible UI-related errors:</p> <pre><code>@tagged_union\nclass DisplayError:\n    \"\"\"Represents display-related errors.\"\"\"\n    tag: Literal[\"validation\", \"rendering\", \"interaction\", \"timeout\", \"execution\", \"input\"]\n    validation: str | None = None\n    rendering: tuple[str, Exception] | None = None\n    interaction: tuple[str, Exception] | None = None\n    timeout: tuple[str, Exception] | None = None\n    execution: tuple[str, str] | None = None\n    input: tuple[str, str] | None = None\n\n    # Static constructors for each error type\n    @staticmethod\n    def Validation(message: str) -&gt; \"DisplayError\":\n        return DisplayError(tag=\"validation\", validation=message)\n\n    # Other constructors omitted for brevity\n</code></pre>"},{"location":"docs/cli/utils/ui/#result-based-error-handling","title":"Result-based Error Handling","text":"<p>All UI functions return <code>Result[T, DisplayError]</code> for type-safe error handling:</p> <pre><code>Result[None, DisplayError]  # For display operations\nResult[Table, DisplayError] # For table creation\nResult[Panel, DisplayError] # For panel creation\n</code></pre>"},{"location":"docs/cli/utils/ui/#basic-display-functions","title":"Basic Display Functions","text":""},{"location":"docs/cli/utils/ui/#messages","title":"Messages","text":"<pre><code>success_message(message: str) -&gt; DisplayResult\nerror_message(message: str, details: str | None = None) -&gt; DisplayResult\nwarning_message(message: str) -&gt; DisplayResult\ndisplay_message(message: str, style: str) -&gt; DisplayResult\n</code></pre>"},{"location":"docs/cli/utils/ui/#panels-and-rules","title":"Panels and Rules","text":"<pre><code>create_panel(title: str, content: str, style: str) -&gt; Result[Panel, DisplayError]\ndisplay_rule(message: str, style: str = \"blue\") -&gt; DisplayResult\n</code></pre>"},{"location":"docs/cli/utils/ui/#tables","title":"Tables","text":""},{"location":"docs/cli/utils/ui/#basic-tables","title":"Basic Tables","text":"<pre><code>create_table_row(name_result: tuple[str, Result[str, T]]) -&gt; Result[tuple[str, str], DisplayError]\nadd_row_to_table(table: Table, row: tuple[str, str]) -&gt; Result[Table, DisplayError]\ncreate_summary_table(results: Block[tuple[str, Result[str, T]]]) -&gt; Result[Table, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#advanced-tables","title":"Advanced Tables","text":"<pre><code>create_multi_column_table(\n    columns: list[tuple[str, str | None]],\n    rows: list[list[str]],\n    title: str | None = None\n) -&gt; Result[Table, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#input-handling","title":"Input Handling","text":"<pre><code>prompt_for_input(\n    prompt: str,\n    validator: Callable[[str], Result[str, str]] | None = None\n) -&gt; Result[str, DisplayError]\n\nconfirm_action(prompt: str) -&gt; Result[bool, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#progress-display","title":"Progress Display","text":"<pre><code>display_progress[T](\n    items: Iterable[T],\n    process_fn: Callable[[T], Result[str, str]],\n    description: str = \"Processing\"\n) -&gt; DisplayResult\n</code></pre>"},{"location":"docs/cli/utils/ui/#error-handling-utilities","title":"Error Handling Utilities","text":""},{"location":"docs/cli/utils/ui/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>handle_ui_error(error: DisplayError) -&gt; DisplayResult\naggregate_errors(errors: Block[DisplayError]) -&gt; DisplayError\n</code></pre>"},{"location":"docs/cli/utils/ui/#advanced-error-recovery","title":"Advanced Error Recovery","text":"<pre><code>with_fallback[T](\n    operation: Callable[[], Result[T, DisplayError]], \n    fallback: T,\n    error_message: str | None = None\n) -&gt; T\n\nwith_retry[T](\n    operation: Callable[[], Result[T, DisplayError]],\n    max_attempts: int = 3,\n    delay: float = 1.0\n) -&gt; Result[T, DisplayError]\n\nrecover_ui[T](\n    operation: Callable[[], Result[T, DisplayError]],\n    recovery_strategies: dict[str, Callable[[], Result[T, DisplayError]]],\n    max_attempts: int = 3\n) -&gt; Result[T, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#context-management","title":"Context Management","text":"<pre><code>with_ui_context[T](\n    operation: Callable[[], Result[T, DisplayError]],\n    setup: Callable[[], Result[None, DisplayError]] | None = None,\n    cleanup: Callable[[], Result[None, DisplayError]] | None = None\n) -&gt; Result[T, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#safe-display-operations","title":"Safe Display Operations","text":"<pre><code>safe_display[T](\n    content: T,\n    display_fn: Callable[[T], Result[None, DisplayError]],\n    fallback_fn: Callable[[T], Result[None, DisplayError]] | None = None\n) -&gt; DisplayResult\n</code></pre>"},{"location":"docs/cli/utils/ui/#validation","title":"Validation","text":"<pre><code>def validate_input(value: str | None, name: str) -&gt; Result[str, DisplayError]\ndef validate_style(style: str) -&gt; Result[str, DisplayError]\ndef validate_table_data(headers: list[str], rows: list[list[str]]) -&gt; Result[None, DisplayError]\n</code></pre>"},{"location":"docs/cli/utils/ui/#best-practices","title":"Best Practices","text":"<ol> <li>Always Handle Errors: Use <code>.map_error(handle_ui_error)</code> or proper error handling for all UI operations</li> <li>Validate Inputs: Use validation functions before processing</li> <li>Use Type Safety: Leverage generic types and Result for type-safe operations</li> <li>Compose Operations: Use pipe and functional composition for complex operations</li> <li>Provide Context: Use descriptive error messages and proper error types</li> </ol>"},{"location":"docs/cli/utils/ui/#examples","title":"Examples","text":""},{"location":"docs/cli/utils/ui/#creating-a-summary-display","title":"Creating a Summary Display","text":"<pre><code>def display_summary(results: Block[tuple[str, Result[str, Error]]]) -&gt; DisplayResult:\n    return (\n        create_summary_table(results)\n        .bind(lambda table: \n            display_rule(\"Summary\")\n            .bind(lambda _: Ok(console.print(table)))\n        )\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#input-with-validation","title":"Input with Validation","text":"<pre><code>def get_verified_input(prompt: str) -&gt; Result[str, DisplayError]:\n    return prompt_for_input(\n        prompt,\n        lambda value: Ok(value) if value.strip() else Error(\"Input cannot be empty\")\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#error-recovery","title":"Error Recovery","text":"<pre><code>def safe_display_operation() -&gt; DisplayResult:\n    return recover_ui(\n        lambda: display_complex_ui(),\n        {\n            \"rendering\": lambda: display_fallback_ui(),\n            \"validation\": lambda: display_error_message()\n        }\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#progress-with-context","title":"Progress with Context","text":"<pre><code>def process_with_progress(items: list[str]) -&gt; DisplayResult:\n    return with_ui_context(\n        lambda: display_progress(\n            items,\n            process_item,\n            \"Processing items\"\n        ),\n        setup=lambda: display_rule(\"Starting Process\"),\n        cleanup=lambda: display_rule(\"Process Complete\")\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"docs/cli/utils/ui/#composing-multiple-ui-operations","title":"Composing Multiple UI Operations","text":"<pre><code>def complex_ui_operation() -&gt; DisplayResult:\n    return (\n        display_rule(\"Starting Operation\")\n        .bind(lambda _: prompt_for_input(\"Enter value: \"))\n        .bind(lambda value: \n            create_panel(\"Input\", value, \"cyan\")\n            .bind(lambda panel: Ok(console.print(panel)))\n        )\n        .bind(lambda _: success_message(\"Operation complete\"))\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#safe-error-recovery","title":"Safe Error Recovery","text":"<p>When dealing with potentially failing UI operations:</p> <pre><code>def display_with_recovery() -&gt; None:\n    result = with_retry(\n        lambda: display_complex_data(),\n        max_attempts=3,\n        delay=1.0\n    )\n\n    if result.is_error():\n        with_fallback(\n            lambda: display_simple_fallback(),\n            fallback=None,\n            error_message=\"Failed to display data\"\n        )\n</code></pre>"},{"location":"docs/cli/utils/ui/#progress-with-error-handling","title":"Progress with Error Handling","text":"<p>Processing items with progress and proper error handling:</p> <pre><code>def process_items(items: list[str]) -&gt; DisplayResult:\n    return with_ui_context(\n        lambda: display_progress(\n            items,\n            lambda item: Try.apply(lambda: process_single_item(item))\n                .map_error(lambda e: f\"Failed to process {item}: {str(e)}\"),\n            \"Processing items\"\n        ),\n        setup=lambda: display_rule(\"Starting batch process\"),\n        cleanup=lambda: display_rule(\"Process complete\")\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#terminal-ui-tui","title":"Terminal UI (TUI)","text":"<p>The Fast-Craftsmanship CLI includes an interactive Terminal User Interface (TUI) that provides a user-friendly way to navigate and use all available commands.</p>"},{"location":"docs/cli/utils/ui/#launching-the-tui","title":"Launching the TUI","text":"<p>The TUI can be launched with:</p> <pre><code># Using the menu command\npython -m fcship.cli menu\n\n# From the Makefile\nmake tui\n</code></pre>"},{"location":"docs/cli/utils/ui/#tui-features","title":"TUI Features","text":"<ul> <li>Category-based Navigation: Commands are organized into logical categories for easy navigation</li> <li>Interactive Selection: Select commands and options with simple keyboard input</li> <li>Command Help: View detailed help for any available command</li> <li>Command Execution: Run commands directly from the TUI with interactive input</li> <li>Keyboard Navigation: Use keyboard shortcuts for quick navigation (b for back, q for quit)</li> <li>Context-aware Display: See relevant information for each command</li> <li>Error Handling: Graceful error handling for command execution failures</li> </ul>"},{"location":"docs/cli/utils/ui/#tui-structure","title":"TUI Structure","text":"<p>The TUI provides a three-level navigation structure:</p> <ol> <li>Category Selection: Choose from available command categories (scaffold, vcs, quality, db)</li> <li>Command Selection: Select a specific command within the chosen category</li> <li>Command Options: Run the command or view its help information</li> </ol>"},{"location":"docs/cli/utils/ui/#implementation-details","title":"Implementation Details","text":"<p>The TUI is implemented using the Rich library for Python:</p> <pre><code># Main TUI components\ndef run_tui() -&gt; None:\n    \"\"\"Run the Terminal UI application.\"\"\"\n    try:\n        while True:\n            # Display categories and get selection\n            valid_categories = display_categories()\n            choice = Prompt.ask(\"&gt; \", choices=[\"q\"] + [str(i) for i in range(1, len(valid_categories) + 1)])\n\n            if choice.lower() == 'q':\n                break\n\n            # Handle category, command, and option selection\n            # [implementation details]\n    except KeyboardInterrupt:\n        console.print(\"\\n[bold yellow]Menu interrupted. Exiting...[/bold yellow]\")\n    finally:\n        clear_screen()\n        console.print(\"[bold green]Thanks for using Fast-Craftsmanship CLI![/bold green]\")\n</code></pre>"},{"location":"docs/cli/utils/ui/#menu-navigation-functions","title":"Menu Navigation Functions","text":"<p>The TUI implementation includes several key functions:</p> <pre><code># Display available categories\ndef display_categories():\n    \"\"\"Display the available command categories.\"\"\"\n    # Implementation using Rich tables and panels\n\n# Display commands within a category\ndef display_commands(category_id: str):\n    \"\"\"Display the commands for a specific category.\"\"\"\n    # Implementation using Rich tables\n\n# Display options for a command\ndef display_command_options(category_id: str, command_name: str):\n    \"\"\"Display options for a specific command.\"\"\"\n    # Implementation using Rich panels and tables\n\n# Execute commands\ndef run_command(command_name: str, show_help: bool = False):\n    \"\"\"Run a command or show its help.\"\"\"\n    # Implementation using subprocess\n</code></pre>"},{"location":"docs/cli/utils/ui/#command-execution","title":"Command Execution","text":"<p>Commands are executed using Python's subprocess module to maintain interactive capabilities:</p> <pre><code>def run_command(command_name: str, show_help: bool = False):\n    \"\"\"Run a command or show its help.\"\"\"\n    cmd = [\"python\", \"-m\", \"fcship.cli\", command_name, \"--help\" if show_help else \"\"]\n\n    try:\n        # Use subprocess.Popen to maintain interactive capabilities\n        process = subprocess.Popen(cmd)\n        process.wait()\n\n        # Handle command completion or failure\n        if process.returncode == 0:\n            console.print(\"\\n[bold green]Command completed successfully.[/bold green]\")\n        else:\n            console.print(f\"\\n[bold red]Command failed with exit code {process.returncode}[/bold red]\")\n    except Exception as e:\n        console.print(f\"\\n[bold red]Error: {e}[/bold red]\")\n</code></pre>"},{"location":"docs/cli/utils/ui/#example-usage-flow","title":"Example Usage Flow","text":"<p>A typical user interaction flow:</p> <ol> <li>Launch the TUI with <code>python -m fcship.cli menu</code></li> <li>View the available categories and select one (e.g., \"scaffold\")</li> <li>View commands in the selected category and choose one (e.g., \"project\")</li> <li>Choose to either run the command or view its help</li> <li>If running the command, interact with it directly</li> <li>After command execution, return to the command options menu</li> <li>Navigate back to previous menus or quit the TUI</li> </ol>"},{"location":"docs/cli/utils/ui/#batch-operations-with-progress","title":"Batch Operations with Progress","text":"<p>For commands that process multiple items with progress tracking:</p> <pre><code>def batch_process[T, U](\n    items: Block[T],\n    process_fn: Callable[[T], Result[U, DisplayError]],\n    batch_size: int = 10\n) -&gt; Result[Block[U], DisplayError]:\n    def process_batch(batch: Block[T]) -&gt; DisplayResult:\n        return with_ui_context(\n            lambda: display_progress(\n                batch,\n                process_fn,\n                f\"Processing batch of {len(batch)} items\"\n            ),\n            setup=lambda: display_rule(\"Starting batch\"),\n            cleanup=lambda: success_message(\"Batch complete\")\n        )\n\n    return pipe(\n        items.chunk(batch_size),\n        seq.traverse(process_batch),\n        Result.map(seq.concat)\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#form-input-collection","title":"Form Input Collection","text":"<p>Collecting multiple inputs with validation:</p> <pre><code>def collect_form_data(\n    fields: list[tuple[str, Callable[[str], Result[str, str]]]]\n) -&gt; Result[dict[str, str], DisplayError]:\n    def collect_field(field: tuple[str, Callable[[str], Result[str, str]]]) -&gt; Result[tuple[str, str], DisplayError]:\n        prompt, validator = field\n        return prompt_for_input(f\"{prompt}: \", validator).map(lambda v: (prompt, v))\n\n    return pipe(\n        fields,\n        Block.of_seq,\n        seq.traverse(collect_field),\n        Result.map(dict)\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#integration-with-other-modules","title":"Integration with Other Modules","text":""},{"location":"docs/cli/utils/ui/#with-error-handling-module","title":"With Error Handling Module","text":"<pre><code>from fcship.utils.error_handling import handle_command_errors\n\n@handle_command_errors\ndef safe_ui_operation() -&gt; None:\n    result = complex_ui_operation()\n    if result.is_error():\n        handle_ui_error(result.error)\n</code></pre>"},{"location":"docs/cli/utils/ui/#with-validation-module","title":"With Validation Module","text":"<pre><code>from fcship.utils.validation import validate_path\n\ndef prompt_for_file() -&gt; Result[str, DisplayError]:\n    return prompt_for_input(\n        \"Enter file path: \",\n        lambda p: validate_path(p).map_error(str)\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#with-type-utils","title":"With Type Utils","text":"<pre><code>from fcship.utils.type_utils import ensure_type\n\ndef display_typed_data[T](data: Any, expected_type: type[T]) -&gt; DisplayResult:\n    return (\n        ensure_type(data, expected_type)\n        .map_error(lambda e: DisplayError.Validation(str(e)))\n        .bind(lambda typed_data: display_message(str(typed_data), \"cyan\"))\n    )\n</code></pre>"},{"location":"docs/cli/utils/ui/#testing-ui-components","title":"Testing UI Components","text":""},{"location":"docs/cli/utils/ui/#mock-console-example","title":"Mock Console Example","text":"<pre><code>from unittest.mock import Mock\nfrom rich.console import Console\n\ndef test_ui_component():\n    mock_console = Mock(spec=Console)\n    result = with_ui_context(\n        lambda: display_complex_ui(),\n        console=mock_console\n    )\n    assert result.is_ok()\n    mock_console.print.assert_called()\n</code></pre>"},{"location":"docs/cli/utils/ui/#testing-error-handling","title":"Testing Error Handling","text":"<pre><code>def test_error_recovery():\n    failing_op = lambda: Error(DisplayError.Rendering(\"Test error\", Exception()))\n    result = with_retry(failing_op, max_attempts=2)\n    assert result.is_error()\n    assert result.error.tag == \"rendering\"\n</code></pre>"},{"location":"docs/cli/utils/ui/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Batch Processing: Use <code>batch_process</code> for large datasets</li> <li>Progress Indicators: Only use for operations taking &gt;1 second</li> <li>Error Recovery: Set reasonable retry attempts and delays</li> <li>Context Management: Clean up resources properly with <code>with_ui_context</code></li> </ol>"},{"location":"docs/cli/utils/ui/#extending-the-ui-utilities","title":"Extending the UI Utilities","text":""},{"location":"docs/cli/utils/ui/#creating-custom-display-types","title":"Creating Custom Display Types","text":"<pre><code>@dataclass\nclass CustomDisplay:\n    title: str\n    content: str\n    style: str\n\ndef display_custom(\n    custom: CustomDisplay\n) -&gt; DisplayResult:\n    return create_panel(\n        custom.title,\n        custom.content,\n        custom.style\n    ).bind(lambda panel: Ok(console.print(panel)))\n</code></pre>"},{"location":"docs/cli/utils/ui/#adding-new-error-types","title":"Adding New Error Types","text":"<pre><code>@tagged_union\nclass CustomDisplayError(DisplayError):\n    tag: Literal[\"validation\", \"rendering\", \"interaction\", \"timeout\", \"execution\", \"input\", \"custom\"]\n    custom: str | None = None\n\n    @staticmethod\n    def Custom(message: str) -&gt; \"CustomDisplayError\":\n        return CustomDisplayError(tag=\"custom\", custom=message)\n</code></pre>"},{"location":"docs/cli/utils/ui/#usage-examples","title":"Usage Examples","text":"<pre><code># Using TableResult\ndef create_status_table(items: list[str]) -&gt; TableResult:\n    table = Table()\n    table.add_column(\"Item\")\n    table.add_column(\"Status\")\n    for item in items:\n        table.add_row(item, \"\u2713\")\n    return Ok(table)\n\n# Using DisplayFunction\ndef with_fallback_display[T](\n    content: T,\n    primary: DisplayFunction[T],\n    fallback: DisplayFunction[T]\n) -&gt; DisplayResult:\n    result = primary(content)\n    return result if result.is_ok() else fallback(content)\n\n# Using RecoveryStrategy\ndef with_recovery[T](operation: Callable[[], Result[T, DisplayError]]) -&gt; Result[T, DisplayError]:\n    strategies: RecoveryStrategy[T] = {\n        \"validation\": lambda: retry_with_default(),\n        \"rendering\": lambda: retry_with_simple_output(),\n        \"interaction\": lambda: retry_with_alternate_input()\n    }\n    return recover_ui(operation, strategies)\n</code></pre>"},{"location":"docs/cli/utils/ui/#future-improvements","title":"Future Improvements","text":"<ol> <li>Keyboard Shortcuts: Add more keyboard shortcuts for faster navigation</li> <li>Theming Support: Allow users to customize the TUI appearance</li> <li>Command History: Implement command history tracking</li> <li>Parameter Input: Add interactive parameter input for commands</li> <li>Persistent Settings: Save user preferences between sessions</li> <li>Help Context: Show command help inline for better usability</li> <li>Auto-complete: Add tab completion for command names and parameters</li> <li>Filter Options: Allow filtering command lists by keyword</li> </ol>"},{"location":"docs/functional_programming/","title":"Functional Programming","text":"<p>This document provides an overview of functional programming principles used in Fast Craftsmanship.</p>"},{"location":"docs/functional_programming/#core-principles","title":"Core Principles","text":"<p>Fast Craftsmanship embraces functional programming principles to create robust, maintainable code:</p> <ul> <li>Immutability: Prefer immutable data structures to reduce side effects</li> <li>Pure Functions: Functions that have no side effects and always return the same output for the same input</li> <li>Function Composition: Building complex behavior by combining simple functions</li> <li>Higher-Order Functions: Functions that take other functions as arguments or return functions</li> <li>Type Safety: Strong typing to catch errors at compile time</li> </ul>"},{"location":"docs/functional_programming/#functional-patterns","title":"Functional Patterns","text":"<p>The codebase applies several functional patterns:</p> <ul> <li>Railway Oriented Programming (ROP): For error handling and flow control</li> <li>Effects System: For managing side effects and dependencies</li> <li>Function Pipelines: For data transformation workflows</li> <li>Pattern Matching: For expressive conditional logic</li> </ul>"},{"location":"docs/functional_programming/#example","title":"Example","text":"<p>Here's a simple example of functional programming style in Fast Craftsmanship:</p> <pre><code>from typing import List, Callable\nfrom fcship.functional import pipe, map_fn, filter_fn, reduce_fn\n\n# Define pure functions\ndef is_even(x: int) -&gt; bool:\n    return x % 2 == 0\n\ndef square(x: int) -&gt; int:\n    return x * x\n\ndef sum_list(nums: List[int]) -&gt; int:\n    return sum(nums)\n\n# Compose functions with a pipeline\nprocess_numbers = pipe(\n    filter_fn(is_even),  # Keep only even numbers\n    map_fn(square),      # Square each number\n    sum_list             # Sum the results\n)\n\n# Apply the pipeline\nresult = process_numbers([1, 2, 3, 4, 5])  # Returns 20 (2\u00b2 + 4\u00b2 = 4 + 16 = 20)\n</code></pre>"},{"location":"docs/functional_programming/#benefits","title":"Benefits","text":"<p>Functional programming in Fast Craftsmanship provides:</p> <ul> <li>Predictability: Code behavior is more deterministic</li> <li>Testability: Pure functions are easier to test</li> <li>Composability: Small pieces can be combined in many ways</li> <li>Parallelization: Immutable data and pure functions enable concurrent processing</li> <li>Reasoning: Code is easier to reason about with reduced state and side effects</li> </ul>"},{"location":"docs/functional_programming/#further-reading","title":"Further Reading","text":"<ul> <li>Railway Oriented Programming (ROP)</li> <li>Effects System</li> <li>Functional Error Handling</li> <li>Type System </li> </ul>"},{"location":"functional/","title":"Functional Programming in Fast Craftsmanship","text":"<p>Fast Craftsmanship is built on functional programming principles, particularly Railway Oriented Programming (ROP), to create robust, maintainable, and testable code.</p>"},{"location":"functional/#why-functional-programming","title":"Why Functional Programming?","text":"<p>Functional programming provides several benefits for a CLI tool like Fast Craftsmanship:</p> <ul> <li>Error Handling: Explicit error paths with <code>Result</code> types</li> <li>Composability: Functions can be easily combined and reused</li> <li>Testability: Pure functions are easier to test</li> <li>Predictability: Reduced side effects lead to more predictable code</li> <li>Readability: Clear data flow and transformation pipelines</li> </ul>"},{"location":"functional/#core-concepts","title":"Core Concepts","text":""},{"location":"functional/#railway-oriented-programming-rop","title":"Railway Oriented Programming (ROP)","text":"<p>Railway Oriented Programming is a functional approach to handling errors and composing functions. It uses a <code>Result</code> type to represent either a successful outcome or an error.</p> <pre><code>from expression import Result, Ok, Error\n\ndef divide(a: int, b: int) -&gt; Result[float, str]:\n    if b == 0:\n        return Error(\"Cannot divide by zero\")\n    return Ok(a / b)\n</code></pre>"},{"location":"functional/#function-composition","title":"Function Composition","text":"<p>Functions can be composed together using pipelines:</p> <pre><code>from expression import pipe, pipeline\n\ndef process_data(data: str) -&gt; Result[str, str]:\n    return pipeline(\n        validate,\n        transform,\n        save\n    )(data)\n</code></pre>"},{"location":"functional/#effect-functions","title":"Effect Functions","text":"<p>For sequential operations where each step depends on the previous one, we use effect functions:</p> <pre><code>from expression import effect\n\n@effect.result[str, str]()\ndef process_user(user_id: str):\n    user = yield from fetch_user(user_id)\n    profile = yield from get_profile(user)\n    settings = yield from load_settings(profile)\n    return settings\n</code></pre>"},{"location":"functional/#core-types","title":"Core Types","text":"<p>Fast Craftsmanship uses these core functional types:</p>"},{"location":"functional/#result","title":"Result","text":"<p><code>Result[T, E]</code> represents either a successful value of type <code>T</code> or an error of type <code>E</code>:</p> <pre><code>from expression import Result, Ok, Error\n\nresult = divide(10, 2)  # Ok(5.0)\nresult = divide(10, 0)  # Error(\"Cannot divide by zero\")\n\n# Pattern matching\nmatch result:\n    case Ok(value):\n        print(f\"Success: {value}\")\n    case Error(msg):\n        print(f\"Error: {msg}\")\n</code></pre>"},{"location":"functional/#option","title":"Option","text":"<p><code>Option[T]</code> represents either a value of type <code>T</code> or the absence of a value:</p> <pre><code>from expression import Option, Some, Nothing\n\noption = find_user(\"alice\")  # Some(User(...))\noption = find_user(\"unknown\")  # Nothing\n\n# Pattern matching\nmatch option:\n    case Some(user):\n        print(f\"Found user: {user.name}\")\n    case Nothing:\n        print(\"User not found\")\n</code></pre>"},{"location":"functional/#tagged-union","title":"Tagged Union","text":"<p><code>Tagged Union</code> allows creating custom union types with multiple cases:</p> <pre><code>from expression import tagged_union, tag\nfrom typing import Literal\n\n@tagged_union\nclass ApiError:\n    tag: Literal[\"validation\", \"network\", \"server\"] = tag()\n\n    validation: str = case()\n    network: str = case()\n    server: int = case()\n</code></pre>"},{"location":"functional/#best-practices","title":"Best Practices","text":"<p>When working with Fast Craftsmanship, follow these functional programming best practices:</p> <ol> <li>Use Result for Error Handling: Avoid exceptions and use <code>Result</code> types</li> <li>Compose Functions: Use pipelines to build complex operations</li> <li>Keep Functions Pure: Minimize side effects and make them explicit</li> <li>Make Data Immutable: Use immutable data structures (like Pydantic models)</li> <li>Pattern Match: Use pattern matching to handle different cases</li> </ol>"},{"location":"functional/#learn-more","title":"Learn More","text":"<ul> <li>Railway Oriented Programming - Learn about the ROP pattern</li> <li>Effect Functions - Understand effect functions in depth</li> </ul>"},{"location":"functional/effects/","title":"Effect Functions","text":"<p>Effect functions provide a powerful way to handle sequences of operations that may fail, while maintaining composability and error handling.</p>"},{"location":"functional/effects/#overview","title":"Overview","text":"<p>In Railway Oriented Programming, operations that may fail return a <code>Result</code> type. When you need to chain multiple operations where each depends on the result of the previous one, using <code>bind</code> or <code>pipeline</code> can become verbose and hard to read.</p> <p>Effect functions solve this problem by using generator-based functions with the <code>@effect.result</code> decorator.</p>"},{"location":"functional/effects/#basic-structure","title":"Basic Structure","text":"<p>An effect function has this general structure:</p> <pre><code>from expression import effect, Result, Ok, Error\n\n@effect.result[ReturnType, ErrorType]()\ndef process_data(input_data):\n    # Yield from operation 1, which returns a Result\n    intermediate_result = yield from operation1(input_data)\n\n    # Yield from operation 2, which also returns a Result\n    final_result = yield from operation2(intermediate_result)\n\n    # Return the final result (will be wrapped in Ok)\n    return final_result\n</code></pre>"},{"location":"functional/effects/#how-it-works","title":"How It Works","text":"<ol> <li>The function is decorated with <code>@effect.result[ReturnType, ErrorType]()</code></li> <li>Inside the function, operations are performed using <code>yield from</code> with functions that return <code>Result</code> objects</li> <li>If any operation returns an <code>Error</code>, execution stops and the error is propagated</li> <li>If all operations succeed, the final <code>return</code> value is wrapped in an <code>Ok</code></li> </ol>"},{"location":"functional/effects/#example-user-processing","title":"Example: User Processing","text":"<pre><code>from expression import effect, Result, Ok, Error\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    id: str\n    name: str\n\nclass Profile(BaseModel):\n    user_id: str\n    preferences: dict\n\nclass Settings(BaseModel):\n    theme: str\n    notifications: bool\n\ndef get_user(user_id: str) -&gt; Result[User, str]:\n    # Simulated database lookup\n    if user_id == \"123\":\n        return Ok(User(id=\"123\", name=\"Alice\"))\n    return Error(f\"User not found: {user_id}\")\n\ndef get_profile(user: User) -&gt; Result[Profile, str]:\n    # Simulated profile lookup\n    if user.id == \"123\":\n        return Ok(Profile(user_id=user.id, preferences={\"language\": \"en\"}))\n    return Error(f\"Profile not found for user: {user.id}\")\n\ndef get_settings(profile: Profile) -&gt; Result[Settings, str]:\n    # Get settings based on profile\n    lang = profile.preferences.get(\"language\", \"en\")\n    if lang == \"en\":\n        return Ok(Settings(theme=\"light\", notifications=True))\n    return Error(f\"Settings not available for language: {lang}\")\n\n@effect.result[Settings, str]()\ndef get_user_settings(user_id: str):\n    # The effect function chains the operations\n    user = yield from get_user(user_id)\n    profile = yield from get_profile(user)\n    settings = yield from get_settings(profile)\n    return settings\n\n# Usage:\nresult = get_user_settings(\"123\")  # Ok(Settings(theme='light', notifications=True))\nresult = get_user_settings(\"456\")  # Error(\"User not found: 456\")\n</code></pre>"},{"location":"functional/effects/#early-returns","title":"Early Returns","text":"<p>You can return early from an effect function by using <code>yield Error(...)</code> followed by a <code>return</code> statement:</p> <pre><code>@effect.result[str, str]()\ndef process_user(user_id: str):\n    # Check if user ID is valid\n    if not user_id:\n        yield Error(\"User ID cannot be empty\")\n        return  # Early return after yielding an Error\n\n    user = yield from get_user(user_id)\n    # Continue with the rest of the function...\n    return f\"Processed user: {user.name}\"\n</code></pre>"},{"location":"functional/effects/#working-with-optional-values","title":"Working with Optional Values","text":"<p>You can easily handle <code>Option</code> types within effect functions:</p> <pre><code>from expression import effect, Result, Ok, Error, Option, Some, Nothing\n\ndef find_user(user_id: str) -&gt; Option[User]:\n    # Returns Some(user) or Nothing\n\n@effect.result[User, str]()\ndef process_optional_user(user_id: str):\n    option_user = find_user(user_id)\n\n    match option_user:\n        case Some(user):\n            return user\n        case Nothing:\n            yield Error(f\"User not found: {user_id}\")\n            return  # Early return after yielding an Error\n</code></pre>"},{"location":"functional/effects/#testing-effect-functions","title":"Testing Effect Functions","text":"<p>Testing effect functions requires special attention:</p> <pre><code># Option 1: Use @effect.result in the test function\ndef test_get_user_settings():\n    @effect.result[None, None]()\n    def run_test():\n        result = yield from get_user_settings(\"123\")\n        assert result.is_ok()\n        assert result.ok.theme == \"light\"\n\n    run_test()  # Run the effect function\n\n# Option 2: Collect the final result by iterating the generator\ndef test_get_user_settings_with_iteration():\n    final_result = None\n    for step in get_user_settings(\"123\"):\n        final_result = step\n\n    assert final_result.is_ok()\n    assert final_result.ok.theme == \"light\"\n</code></pre>"},{"location":"functional/effects/#mocking-in-tests","title":"Mocking in Tests","text":"<p>When testing code that uses effect functions, you may need to mock other effect functions:</p> <pre><code>def test_with_mocks(monkeypatch):\n    @effect.result[User, str]()\n    def mock_get_user(user_id: str):\n        yield Ok(User(id=user_id, name=\"Mock User\"))\n\n    monkeypatch.setattr(\"module.get_user\", mock_get_user)\n\n    @effect.result[None, None]()\n    def run_test():\n        result = yield from get_user_settings(\"mock_id\")\n        assert result.is_ok()\n\n    run_test()\n</code></pre>"},{"location":"functional/effects/#alternatives-to-effect-functions","title":"Alternatives to Effect Functions","text":"<p>When should you use effect functions versus other approaches?</p> Approach When to Use Effect Functions Sequential operations with dependency between steps Pipeline Independent operations in a chain Pattern Matching Simple, non-sequential error handling Map/Bind When you need manual control of the flow <p>Effect functions are particularly useful when:</p> <ol> <li>Each step depends on the result of the previous step</li> <li>You want to maintain clean, readable code</li> <li>You need early returns based on conditions</li> <li>You're replacing async/await patterns</li> </ol>"},{"location":"functional/rop/","title":"Railway Oriented Programming (ROP)","text":"<p>Railway Oriented Programming is a functional approach to handle errors and compose functions that can fail. It's particularly effective for creating robust, maintainable applications with clear error handling.</p>"},{"location":"functional/rop/#the-railway-metaphor","title":"The Railway Metaphor","text":"<p>In traditional programming, when a function encounters an error, it typically throws an exception, disrupting the normal flow of execution. This can be visualized as a train derailing from its track.</p> <p>ROP visualizes program flow as a railway:</p> <ul> <li>The \"success track\" represents normal operation</li> <li>The \"failure track\" represents error states</li> <li>Functions are like railway switches that can move values from the success track to the failure track</li> <li>Once on the failure track, values stay there (errors propagate)</li> </ul>"},{"location":"functional/rop/#core-concept-the-result-type","title":"Core Concept: The Result Type","text":"<p>The foundation of ROP is the <code>Result</code> type, which can be either:</p> <ul> <li><code>Ok(value)</code> - Represents a successful operation with a value</li> <li><code>Error(error)</code> - Represents a failed operation with an error</li> </ul> <pre><code>from expression import Result, Ok, Error\n\ndef divide(a: int, b: int) -&gt; Result[float, str]:\n    if b == 0:\n        return Error(\"Cannot divide by zero\")\n    return Ok(a / b)\n</code></pre>"},{"location":"functional/rop/#function-composition","title":"Function Composition","text":"<p>The power of ROP is in function composition. You can chain multiple functions together, and errors will automatically propagate:</p> <pre><code>from expression import pipeline\n\ndef validate_input(input: str) -&gt; Result[int, str]:\n    try:\n        value = int(input)\n        return Ok(value)\n    except ValueError:\n        return Error(\"Input must be a number\")\n\ndef process_value(value: int) -&gt; Result[int, str]:\n    if value &lt; 0:\n        return Error(\"Value cannot be negative\")\n    return Ok(value * 2)\n\ndef display_result(value: int) -&gt; Result[str, str]:\n    return Ok(f\"Result: {value}\")\n\n# Combine functions with pipeline\nprocess_pipeline = pipeline(\n    validate_input,\n    process_value,\n    display_result\n)\n\n# Use the pipeline\nresult = process_pipeline(\"42\")  # Ok(\"Result: 84\")\nresult = process_pipeline(\"abc\")  # Error(\"Input must be a number\")\nresult = process_pipeline(\"-10\")  # Error(\"Value cannot be negative\")\n</code></pre>"},{"location":"functional/rop/#converting-traditional-code-to-rop","title":"Converting Traditional Code to ROP","text":""},{"location":"functional/rop/#before-traditional-exception-handling","title":"Before: Traditional Exception Handling","text":"<pre><code>def process_data(input_data):\n    try:\n        validated_data = validate(input_data)\n        transformed_data = transform(validated_data)\n        result = save(transformed_data)\n        return result\n    except ValidationError as e:\n        log_error(\"Validation error\", e)\n        raise\n    except TransformError as e:\n        log_error(\"Transform error\", e)\n        raise\n    except SaveError as e:\n        log_error(\"Save error\", e)\n        raise\n</code></pre>"},{"location":"functional/rop/#after-railway-oriented-programming","title":"After: Railway Oriented Programming","text":"<pre><code>def validate(data) -&gt; Result[ValidData, str]:\n    if not is_valid(data):\n        return Error(\"Invalid data\")\n    return Ok(ValidData(data))\n\ndef transform(valid_data: ValidData) -&gt; Result[TransformedData, str]:\n    try:\n        transformed = apply_transformation(valid_data)\n        return Ok(transformed)\n    except Exception:\n        return Error(\"Transformation failed\")\n\ndef save(transformed_data: TransformedData) -&gt; Result[SavedData, str]:\n    if db_save(transformed_data):\n        return Ok(SavedData(transformed_data.id))\n    return Error(\"Save failed\")\n\ndef process_data(input_data) -&gt; Result[SavedData, str]:\n    return pipeline(\n        validate,\n        transform,\n        save\n    )(input_data)\n</code></pre>"},{"location":"functional/rop/#sequential-operations-with-effect-functions","title":"Sequential Operations with Effect Functions","text":"<p>For sequential operations where each step depends on the result of the previous one, use the <code>effect.result</code> decorator:</p> <pre><code>from expression import effect\n\n@effect.result[str, str]()\ndef process_user(user_id: str):\n    # Each step yields from an operation that returns a Result\n    user = yield from get_user(user_id)\n    permissions = yield from get_permissions(user)\n    profile = yield from get_profile(user)\n\n    # Only executed if all previous operations succeeded\n    return f\"User {user.name} has permissions: {permissions}\"\n</code></pre>"},{"location":"functional/rop/#handling-results","title":"Handling Results","text":"<p>To handle the final result of ROP operations, use pattern matching:</p> <pre><code>match process_user(\"alice123\"):\n    case Ok(message):\n        print(f\"Success: {message}\")\n    case Error(error):\n        print(f\"Error: {error}\")\n</code></pre> <p>Or use the convenience methods:</p> <pre><code>result = process_user(\"alice123\")\n\nif result.is_ok():\n    print(f\"Success: {result.ok}\")\nelif result.is_error():\n    print(f\"Error: {result.error}\")\n</code></pre>"},{"location":"functional/rop/#benefits-of-rop-in-fast-craftsmanship","title":"Benefits of ROP in Fast Craftsmanship","text":"<p>Fast Craftsmanship uses ROP throughout its codebase because:</p> <ol> <li>Explicit Error Handling: Errors are values, not exceptions, making them explicit in function signatures</li> <li>Composability: Functions can be easily combined without complex try/except blocks</li> <li>Type Safety: The Result type ensures errors are handled properly</li> <li>Testability: Functions return testable values instead of raising exceptions</li> <li>Self-Documenting: Function signatures with Result types document what can go wrong</li> </ol>"}]}